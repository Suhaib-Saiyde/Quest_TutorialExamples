
uart2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000001ea  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000414  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000005f  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000713  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000022  00000000  00000000  00000733  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000149  00000000  00000000  00000755  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000bb  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000128  00000000  00000000  00000959  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000030  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000093  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000050  00000000  00000000  00000b47  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e4       	ldi	r26, 0x40	; 64
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 34       	cpi	r26, 0x40	; 64
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  c6:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <tx>:
#include<avr/io.h>
#include<util/delay.h>
#include<string.h>

void tx(char *p)
{
  ce:	fc 01       	movw	r30, r24
  d0:	04 c0       	rjmp	.+8      	; 0xda <tx+0xc>
int i;
for(i=0;p[i];i++)
{
UDR0=p[i];
  d2:	8c b9       	out	0x0c, r24	; 12
while((UCSR0A&(1<<5))==0);
  d4:	5d 9b       	sbis	0x0b, 5	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <tx+0x6>
  d8:	31 96       	adiw	r30, 0x01	; 1
#include<string.h>

void tx(char *p)
{
int i;
for(i=0;p[i];i++)
  da:	80 81       	ld	r24, Z
  dc:	88 23       	and	r24, r24
  de:	c9 f7       	brne	.-14     	; 0xd2 <tx+0x4>
  e0:	08 95       	ret

000000e2 <main>:
while((UCSR0A&(1<<5))==0);
}
}

void main()
{
  e2:	8f 92       	push	r8
  e4:	9f 92       	push	r9
  e6:	af 92       	push	r10
  e8:	bf 92       	push	r11
  ea:	cf 92       	push	r12
  ec:	df 92       	push	r13
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	ce 54       	subi	r28, 0x4E	; 78
 100:	d0 40       	sbci	r29, 0x00	; 0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
UCSR0A=0;
 10c:	1b b8       	out	0x0b, r1	; 11
UCSR0B=0x18;
 10e:	88 e1       	ldi	r24, 0x18	; 24
 110:	8a b9       	out	0x0a, r24	; 10
UCSR0C=0x06;
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	80 93 95 00 	sts	0x0095, r24
UBRR0L=103;
 118:	87 e6       	ldi	r24, 0x67	; 103
 11a:	89 b9       	out	0x09, r24	; 9

int i;
char a[]="ENTER THE PASSWORD\r\n",b[]="password",c[15],d[]="\r\nACCESS GRANTED\r\n",e[]="\r\nTRY AGAIN\r\n";
 11c:	de 01       	movw	r26, r28
 11e:	da 96       	adiw	r26, 0x3a	; 58
 120:	e0 e0       	ldi	r30, 0x00	; 0
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	85 e1       	ldi	r24, 0x15	; 21
 126:	01 90       	ld	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	81 50       	subi	r24, 0x01	; 1
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x44>
 12e:	de 01       	movw	r26, r28
 130:	11 96       	adiw	r26, 0x01	; 1
 132:	e5 e1       	ldi	r30, 0x15	; 21
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	89 e0       	ldi	r24, 0x09	; 9
 138:	01 90       	ld	r0, Z+
 13a:	0d 92       	st	X+, r0
 13c:	81 50       	subi	r24, 0x01	; 1
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x56>
 140:	de 01       	movw	r26, r28
 142:	97 96       	adiw	r26, 0x27	; 39
 144:	ee e1       	ldi	r30, 0x1E	; 30
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	83 e1       	ldi	r24, 0x13	; 19
 14a:	01 90       	ld	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	81 50       	subi	r24, 0x01	; 1
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x68>
 152:	de 01       	movw	r26, r28
 154:	1a 96       	adiw	r26, 0x0a	; 10
 156:	e1 e3       	ldi	r30, 0x31	; 49
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	8e e0       	ldi	r24, 0x0E	; 14
 15c:	01 90       	ld	r0, Z+
 15e:	0d 92       	st	X+, r0
 160:	81 50       	subi	r24, 0x01	; 1
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x7a>

while(1)
{
tx(a);
 164:	2a e3       	ldi	r18, 0x3A	; 58
 166:	82 2e       	mov	r8, r18
 168:	91 2c       	mov	r9, r1
 16a:	8c 0e       	add	r8, r28
 16c:	9d 1e       	adc	r9, r29

for(i=0;;i++)
{
	while((UCSR0A&(1<<7))==0);
	c[i]=UDR0;
 16e:	8e 01       	movw	r16, r28
 170:	08 5e       	subi	r16, 0xE8	; 232
 172:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		UDR0='*';
		while((UCSR0A&(1<<5))==0); 
	}
}
if(strcmp(b,c)==0)
 174:	5e 01       	movw	r10, r28
 176:	08 94       	sec
 178:	a1 1c       	adc	r10, r1
 17a:	b1 1c       	adc	r11, r1
{
	tx(d);         
}
else
{
	tx(e);   
 17c:	9a e0       	ldi	r25, 0x0A	; 10
 17e:	c9 2e       	mov	r12, r25
 180:	d1 2c       	mov	r13, r1
 182:	cc 0e       	add	r12, r28
 184:	dd 1e       	adc	r13, r29
		while((UCSR0A&(1<<5))==0); 
	}
}
if(strcmp(b,c)==0)
{
	tx(d);         
 186:	87 e2       	ldi	r24, 0x27	; 39
 188:	e8 2e       	mov	r14, r24
 18a:	f1 2c       	mov	r15, r1
 18c:	ec 0e       	add	r14, r28
 18e:	fd 1e       	adc	r15, r29
int i;
char a[]="ENTER THE PASSWORD\r\n",b[]="password",c[15],d[]="\r\nACCESS GRANTED\r\n",e[]="\r\nTRY AGAIN\r\n";

while(1)
{
tx(a);
 190:	c4 01       	movw	r24, r8
 192:	0e 94 67 00 	call	0xce	; 0xce <tx>
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0

for(i=0;;i++)
{
	while((UCSR0A&(1<<7))==0);
 19a:	5f 9b       	sbis	0x0b, 7	; 11
 19c:	fe cf       	rjmp	.-4      	; 0x19a <main+0xb8>
	c[i]=UDR0;
 19e:	8c b1       	in	r24, 0x0c	; 12
 1a0:	f8 01       	movw	r30, r16
 1a2:	e2 0f       	add	r30, r18
 1a4:	f3 1f       	adc	r31, r19
 1a6:	80 83       	st	Z, r24
	if(c[i]=='\r')
 1a8:	8d 30       	cpi	r24, 0x0D	; 13
 1aa:	41 f4       	brne	.+16     	; 0x1bc <main+0xda>
	{
		c[i]='\0';
 1ac:	10 82       	st	Z, r1
	{
		UDR0='*';
		while((UCSR0A&(1<<5))==0); 
	}
}
if(strcmp(b,c)==0)
 1ae:	b8 01       	movw	r22, r16
 1b0:	c5 01       	movw	r24, r10
 1b2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <strcmp>
 1b6:	89 2b       	or	r24, r25
 1b8:	51 f4       	brne	.+20     	; 0x1ce <main+0xec>
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <main+0xe8>
		c[i]='\0';
		break;
	}
	else
	{
		UDR0='*';
 1bc:	8a e2       	ldi	r24, 0x2A	; 42
 1be:	8c b9       	out	0x0c, r24	; 12
		while((UCSR0A&(1<<5))==0); 
 1c0:	5d 9b       	sbis	0x0b, 5	; 11
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <main+0xde>

while(1)
{
tx(a);

for(i=0;;i++)
 1c4:	2f 5f       	subi	r18, 0xFF	; 255
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
 1c8:	e8 cf       	rjmp	.-48     	; 0x19a <main+0xb8>
		while((UCSR0A&(1<<5))==0); 
	}
}
if(strcmp(b,c)==0)
{
	tx(d);         
 1ca:	c7 01       	movw	r24, r14
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <main+0xee>
}
else
{
	tx(e);   
 1ce:	c6 01       	movw	r24, r12
 1d0:	0e 94 67 00 	call	0xce	; 0xce <tx>
 1d4:	dd cf       	rjmp	.-70     	; 0x190 <main+0xae>

000001d6 <strcmp>:
 1d6:	fb 01       	movw	r30, r22
 1d8:	dc 01       	movw	r26, r24
 1da:	8d 91       	ld	r24, X+
 1dc:	01 90       	ld	r0, Z+
 1de:	80 19       	sub	r24, r0
 1e0:	01 10       	cpse	r0, r1
 1e2:	d9 f3       	breq	.-10     	; 0x1da <strcmp+0x4>
 1e4:	99 0b       	sbc	r25, r25
 1e6:	08 95       	ret

000001e8 <_exit>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <_exit>
