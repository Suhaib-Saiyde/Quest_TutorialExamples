

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Jan  7 07:11:12 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F876A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     	;# 
    16  0001                     	;# 
    17  0002                     	;# 
    18  0003                     	;# 
    19  0004                     	;# 
    20  0005                     	;# 
    21  0006                     	;# 
    22  0007                     	;# 
    23  000A                     	;# 
    24  000B                     	;# 
    25  000C                     	;# 
    26  000D                     	;# 
    27  000E                     	;# 
    28  000E                     	;# 
    29  000F                     	;# 
    30  0010                     	;# 
    31  0011                     	;# 
    32  0012                     	;# 
    33  0013                     	;# 
    34  0014                     	;# 
    35  0015                     	;# 
    36  0015                     	;# 
    37  0016                     	;# 
    38  0017                     	;# 
    39  0018                     	;# 
    40  0019                     	;# 
    41  001A                     	;# 
    42  001B                     	;# 
    43  001B                     	;# 
    44  001C                     	;# 
    45  001D                     	;# 
    46  001E                     	;# 
    47  001F                     	;# 
    48  0081                     	;# 
    49  0085                     	;# 
    50  0086                     	;# 
    51  0087                     	;# 
    52  008C                     	;# 
    53  008D                     	;# 
    54  008E                     	;# 
    55  0091                     	;# 
    56  0092                     	;# 
    57  0093                     	;# 
    58  0094                     	;# 
    59  0098                     	;# 
    60  0099                     	;# 
    61  009C                     	;# 
    62  009D                     	;# 
    63  009E                     	;# 
    64  009F                     	;# 
    65  010C                     	;# 
    66  010D                     	;# 
    67  010E                     	;# 
    68  010F                     	;# 
    69  018C                     	;# 
    70  018D                     	;# 
    71                           
    72                           	psect	strings
    73  0003                     __pstrings:	
    74  0003                     stringtab:	
    75  0003                     __stringtab:	
    76  0003                     stringcode:	
    77                           ;	String table - string pointers are 1 byte each
    78                           
    79  0003                     stringdir:	
    80  0003  3000               	movlw	high stringdir
    81  0004  008A               	movwf	10
    82  0005  0804               	movf	4,w
    83  0006  0A84               	incf	4,f
    84  0007  0782               	addwf	2,f
    85  0008                     __stringbase:	
    86  0008  3400               	retlw	0
    87  0009                     __end_of__stringtab:	
    88  0009                     _dpowers:	
    89  0009  3401               	retlw	1
    90  000A  3400               	retlw	0
    91  000B  340A               	retlw	10
    92  000C  3400               	retlw	0
    93  000D  3464               	retlw	100
    94  000E  3400               	retlw	0
    95  000F  34E8               	retlw	232
    96  0010  3403               	retlw	3
    97  0011  3410               	retlw	16
    98  0012  3427               	retlw	39
    99  0013                     __end_of_dpowers:	
   100  0018                     _RCSTA	set	24
   101  0001                     _TMR0	set	1
   102  0019                     _TXREG	set	25
   103  0030                     _RB0	set	48
   104  0031                     _RB1	set	49
   105  0081                     _OPTION_REG	set	129
   106  0099                     _SPBRG	set	153
   107  0086                     _TRISB	set	134
   108  0098                     _TXSTA	set	152
   109  04C1                     _TRMT	set	1217
   110  0013                     __stringdata:	
   111  0013                     STR_1:	
   112  0013  3425               	retlw	37	;'%'
   113  0014  3464               	retlw	100	;'d'
   114  0015  343A               	retlw	58	;':'
   115  0016  3425               	retlw	37	;'%'
   116  0017  3464               	retlw	100	;'d'
   117  0018  343A               	retlw	58	;':'
   118  0019  3425               	retlw	37	;'%'
   119  001A  3464               	retlw	100	;'d'
   120  001B  340D               	retlw	13
   121  001C  3400               	retlw	0
   122  001D                     __end_of__stringdata:	
   123                           
   124                           ; #config settings
   125  0000                     
   126                           	psect	cinit
   127  07FC                     start_initialization:	
   128  07FC                     __initialization:	
   129  07FC                     end_of_initialization:	
   130                           ;End of C runtime variable initialization code
   131                           
   132  07FC                     __end_of__initialization:	
   133  07FC  0183               	clrf	3
   134  07FD  120A  118A  2E80   	ljmp	_main	;jump to C main() function
   135                           
   136                           	psect	cstackCOMMON
   137  0070                     __pcstackCOMMON:	
   138  0070                     ?_tx:	
   139  0070                     ??_tx:	
   140                           ; 0 bytes @ 0x0
   141                           
   142  0070                     ?_tx1:	
   143                           ; 0 bytes @ 0x0
   144                           
   145  0070                     ??_tx1:	
   146                           ; 0 bytes @ 0x0
   147                           
   148  0070                     ?_main:	
   149                           ; 0 bytes @ 0x0
   150                           
   151  0070                     ?___lwdiv:	
   152                           ; 0 bytes @ 0x0
   153                           
   154  0070                     tx1@i:	
   155                           ; 2 bytes @ 0x0
   156                           
   157  0070                     ___lwdiv@divisor:	
   158                           ; 2 bytes @ 0x0
   159                           
   160                           
   161                           ; 2 bytes @ 0x0
   162  0070                     	ds	1
   163  0071                     tx@i:	
   164                           
   165                           ; 2 bytes @ 0x1
   166  0071                     	ds	1
   167  0072                     ___lwdiv@dividend:	
   168                           
   169                           ; 2 bytes @ 0x2
   170  0072                     	ds	1
   171  0073                     tx@b:	
   172                           
   173                           ; 1 bytes @ 0x3
   174  0073                     	ds	1
   175  0074                     ??___lwdiv:	
   176                           
   177                           ; 0 bytes @ 0x4
   178  0074                     	ds	1
   179  0075                     ___lwdiv@quotient:	
   180                           
   181                           ; 2 bytes @ 0x5
   182  0075                     	ds	2
   183  0077                     ___lwdiv@counter:	
   184                           
   185                           ; 1 bytes @ 0x7
   186  0077                     	ds	1
   187  0078                     ?___lwmod:	
   188  0078                     ___lwmod@divisor:	
   189                           ; 2 bytes @ 0x8
   190                           
   191                           
   192                           ; 2 bytes @ 0x8
   193  0078                     	ds	2
   194  007A                     ___lwmod@dividend:	
   195                           
   196                           ; 2 bytes @ 0xA
   197  007A                     	ds	2
   198  007C                     ??___lwmod:	
   199                           
   200                           ; 0 bytes @ 0xC
   201  007C                     	ds	1
   202  007D                     ___lwmod@counter:	
   203                           
   204                           ; 1 bytes @ 0xD
   205  007D                     	ds	1
   206                           
   207                           	psect	cstackBANK0
   208  0020                     __pcstackBANK0:	
   209  0020                     ?_sprintf:	
   210  0020                     sprintf@f:	
   211                           ; 2 bytes @ 0x0
   212                           
   213                           
   214                           ; 1 bytes @ 0x0
   215  0020                     	ds	7
   216  0027                     ??_sprintf:	
   217                           
   218                           ; 0 bytes @ 0x7
   219  0027                     	ds	3
   220  002A                     sprintf@ap:	
   221                           
   222                           ; 1 bytes @ 0xA
   223  002A                     	ds	1
   224  002B                     sprintf@flag:	
   225                           
   226                           ; 1 bytes @ 0xB
   227  002B                     	ds	1
   228  002C                     sprintf@prec:	
   229                           
   230                           ; 1 bytes @ 0xC
   231  002C                     	ds	1
   232  002D                     sprintf@_val:	
   233                           
   234                           ; 4 bytes @ 0xD
   235  002D                     	ds	4
   236  0031                     sprintf@sp:	
   237                           
   238                           ; 1 bytes @ 0x11
   239  0031                     	ds	1
   240  0032                     sprintf@c:	
   241                           
   242                           ; 1 bytes @ 0x12
   243  0032                     	ds	1
   244  0033                     ??_main:	
   245                           
   246                           ; 0 bytes @ 0x13
   247  0033                     	ds	1
   248  0034                     main@j:	
   249                           
   250                           ; 2 bytes @ 0x14
   251  0034                     	ds	2
   252  0036                     main@x:	
   253                           
   254                           ; 10 bytes @ 0x16
   255  0036                     	ds	10
   256  0040                     main@m:	
   257                           
   258                           ; 2 bytes @ 0x20
   259  0040                     	ds	2
   260  0042                     main@a:	
   261                           
   262                           ; 2 bytes @ 0x22
   263  0042                     	ds	2
   264  0044                     main@s:	
   265                           
   266                           ; 2 bytes @ 0x24
   267  0044                     	ds	2
   268                           
   269                           	psect	maintext
   270  0680                     __pmaintext:	
   271 ;;
   272 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   273 ;;
   274 ;; *************** function _main *****************
   275 ;; Defined at:
   276 ;;		line 39 in file "stopwatch.c"
   277 ;; Parameters:    Size  Location     Type
   278 ;;		None
   279 ;; Auto vars:     Size  Location     Type
   280 ;;  x              10   22[BANK0 ] unsigned char [10]
   281 ;;  s               2   36[BANK0 ] int 
   282 ;;  a               2   34[BANK0 ] int 
   283 ;;  m               2   32[BANK0 ] int 
   284 ;;  j               2   20[BANK0 ] int 
   285 ;;  i               2    0        int 
   286 ;; Return value:  Size  Location     Type
   287 ;;		None               void
   288 ;; Registers used:
   289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   290 ;; Tracked objects:
   291 ;;		On entry : 17F/0
   292 ;;		On exit  : 0/0
   293 ;;		Unchanged: 0/0
   294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   295 ;;      Params:         0       0       0       0       0
   296 ;;      Locals:         0      18       0       0       0
   297 ;;      Temps:          0       1       0       0       0
   298 ;;      Totals:         0      19       0       0       0
   299 ;;Total ram usage:       19 bytes
   300 ;; Hardware stack levels required when called:    2
   301 ;; This function calls:
   302 ;;		_sprintf
   303 ;;		_tx
   304 ;;		_tx1
   305 ;; This function is called by:
   306 ;;		Startup code after reset
   307 ;; This function uses a non-reentrant model
   308 ;;
   309                           
   310                           
   311                           ;psect for function _main
   312  0680                     _main:	
   313                           
   314                           ;stopwatch.c: 41: TXSTA=0x24;
   315                           
   316                           ;incstack = 0
   317                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   318  0680  3024               	movlw	36
   319  0681  1683               	bsf	3,5	;RP0=1, select bank1
   320  0682  1303               	bcf	3,6	;RP1=0, select bank1
   321  0683  0098               	movwf	24	;volatile
   322                           
   323                           ;stopwatch.c: 42: RCSTA=0x90;
   324  0684  3090               	movlw	144
   325  0685  1283               	bcf	3,5	;RP0=0, select bank0
   326  0686  1303               	bcf	3,6	;RP1=0, select bank0
   327  0687  0098               	movwf	24	;volatile
   328                           
   329                           ;stopwatch.c: 43: SPBRG=25;
   330  0688  3019               	movlw	25
   331  0689  1683               	bsf	3,5	;RP0=1, select bank1
   332  068A  1303               	bcf	3,6	;RP1=0, select bank1
   333  068B  0099               	movwf	25	;volatile
   334                           
   335                           ;stopwatch.c: 44: TRISB=0xFF;
   336  068C  30FF               	movlw	255
   337  068D  0086               	movwf	6	;volatile
   338                           
   339                           ;stopwatch.c: 45: OPTION_REG=0x01;
   340  068E  3001               	movlw	1
   341  068F  0081               	movwf	1	;volatile
   342                           
   343                           ;stopwatch.c: 47: int i,a=0,s=0,m=0,j;
   344  0690  1283               	bcf	3,5	;RP0=0, select bank0
   345  0691  1303               	bcf	3,6	;RP1=0, select bank0
   346  0692                     L1:	
   347  0692  01C2               	clrf	main@a
   348  0693  01C3               	clrf	main@a+1
   349  0694  01C4               	clrf	main@s
   350  0695  01C5               	clrf	main@s+1
   351  0696  01C0               	clrf	main@m
   352  0697  01C1               	clrf	main@m+1
   353                           
   354                           ;stopwatch.c: 48: char x[10];
   355                           ;stopwatch.c: 49: sprintf(x,"%d:%d:%d\r",m,s,a);
   356  0698  300B               	movlw	(STR_1-__stringbase)& (0+255)
   357  0699  00B3               	movwf	??_main
   358  069A  0833               	movf	??_main,w
   359  069B  00A0               	movwf	sprintf@f
   360  069C  0841               	movf	main@m+1,w
   361  069D  01A2               	clrf	?_sprintf+2
   362  069E  07A2               	addwf	?_sprintf+2,f
   363  069F  0840               	movf	main@m,w
   364  06A0  01A1               	clrf	?_sprintf+1
   365  06A1  07A1               	addwf	?_sprintf+1,f
   366  06A2  0845               	movf	main@s+1,w
   367  06A3  01A4               	clrf	?_sprintf+4
   368  06A4  07A4               	addwf	?_sprintf+4,f
   369  06A5  0844               	movf	main@s,w
   370  06A6  01A3               	clrf	?_sprintf+3
   371  06A7  07A3               	addwf	?_sprintf+3,f
   372  06A8  0843               	movf	main@a+1,w
   373  06A9  01A6               	clrf	?_sprintf+6
   374  06AA  07A6               	addwf	?_sprintf+6,f
   375  06AB  0842               	movf	main@a,w
   376  06AC  01A5               	clrf	?_sprintf+5
   377  06AD  07A5               	addwf	?_sprintf+5,f
   378  06AE  3036               	movlw	main@x& (0+255)
   379  06AF  120A  118A  2723  120A  118A  	fcall	_sprintf
   380                           
   381                           ;stopwatch.c: 50: tx(x);
   382  06B4  3036               	movlw	main@x& (0+255)
   383  06B5  120A  118A  25ED  120A  118A  	fcall	_tx
   384  06BA                     l869:	
   385                           ;stopwatch.c: 52: while(1)
   386                           
   387                           
   388                           ;stopwatch.c: 53: {
   389                           ;stopwatch.c: 54: if(RB0==0)
   390  06BA  1283               	bcf	3,5	;RP0=0, select bank0
   391  06BB  1303               	bcf	3,6	;RP1=0, select bank0
   392  06BC  1806               	btfsc	6,0	;volatile
   393  06BD  2F1E               	goto	l43
   394  06BE                     l44:	
   395                           ;stopwatch.c: 55: {
   396                           ;stopwatch.c: 56: while(RB0==0);
   397                           
   398  06BE  1C06               	btfss	6,0	;volatile
   399  06BF  2EBE               	goto	l44
   400                           
   401                           ;stopwatch.c: 58: for(j=0;;j++)
   402  06C0  01B4               	clrf	main@j
   403  06C1  01B5               	clrf	main@j+1
   404  06C2                     l875:	
   405                           
   406                           ;stopwatch.c: 59: {
   407                           ;stopwatch.c: 60: tx1();
   408  06C2  120A  118A  25D1  120A  118A  	fcall	_tx1
   409  06C7                     l877:	
   410                           ;stopwatch.c: 61: while(TMR0<=250);
   411                           
   412  06C7  30FB               	movlw	251
   413  06C8  1283               	bcf	3,5	;RP0=0, select bank0
   414  06C9  1303               	bcf	3,6	;RP1=0, select bank0
   415  06CA  0201               	subwf	1,w	;volatile
   416  06CB  1C03               	skipc
   417  06CC  2EC7               	goto	l877
   418                           
   419                           ;stopwatch.c: 62: TMR0=0;
   420  06CD  0181               	clrf	1	;volatile
   421                           
   422                           ;stopwatch.c: 63: a++;
   423  06CE  3001               	movlw	1
   424  06CF  07C2               	addwf	main@a,f
   425  06D0  1803               	skipnc
   426  06D1  0AC3               	incf	main@a+1,f
   427  06D2  3000               	movlw	0
   428  06D3  07C3               	addwf	main@a+1,f
   429                           
   430                           ;stopwatch.c: 64: if(a==100)
   431  06D4  3064               	movlw	100
   432  06D5  0642               	xorwf	main@a,w
   433  06D6  0443               	iorwf	main@a+1,w
   434  06D7  1D03               	skipz
   435  06D8  2EEE               	goto	l895
   436                           
   437                           ;stopwatch.c: 65: {
   438                           ;stopwatch.c: 66: s++;
   439  06D9  3001               	movlw	1
   440  06DA  07C4               	addwf	main@s,f
   441  06DB  1803               	skipnc
   442  06DC  0AC5               	incf	main@s+1,f
   443  06DD  3000               	movlw	0
   444  06DE  07C5               	addwf	main@s+1,f
   445                           
   446                           ;stopwatch.c: 67: a=0;
   447  06DF  01C2               	clrf	main@a
   448  06E0  01C3               	clrf	main@a+1
   449                           
   450                           ;stopwatch.c: 68: if(s==60)
   451  06E1  303C               	movlw	60
   452  06E2  0644               	xorwf	main@s,w
   453  06E3  0445               	iorwf	main@s+1,w
   454  06E4  1D03               	skipz
   455  06E5  2EEE               	goto	l895
   456                           
   457                           ;stopwatch.c: 69: {
   458                           ;stopwatch.c: 70: m++;
   459  06E6  3001               	movlw	1
   460  06E7  07C0               	addwf	main@m,f
   461  06E8  1803               	skipnc
   462  06E9  0AC1               	incf	main@m+1,f
   463  06EA  3000               	movlw	0
   464  06EB  07C1               	addwf	main@m+1,f
   465                           
   466                           ;stopwatch.c: 71: s=0;
   467  06EC  01C4               	clrf	main@s
   468  06ED  01C5               	clrf	main@s+1
   469  06EE                     l895:	
   470                           
   471                           ;stopwatch.c: 72: }
   472                           ;stopwatch.c: 73: }
   473                           ;stopwatch.c: 74: if(RB0==0)
   474  06EE  1806               	btfsc	6,0	;volatile
   475  06EF  2EF3               	goto	l899
   476  06F0                     l54:	
   477                           ;stopwatch.c: 75: {
   478                           ;stopwatch.c: 76: while(RB0==0);
   479                           
   480  06F0  1806               	btfsc	6,0	;volatile
   481  06F1  2F1E               	goto	l43
   482  06F2  2EF0               	goto	l54
   483  06F3                     l899:	
   484                           ;stopwatch.c: 77: break;
   485                           
   486                           
   487                           ;stopwatch.c: 78: }
   488                           ;stopwatch.c: 79: sprintf(x,"%d:%d:%d\r",m,s,a);
   489  06F3  300B               	movlw	(STR_1-__stringbase)& (0+255)
   490  06F4  00B3               	movwf	??_main
   491  06F5  0833               	movf	??_main,w
   492  06F6  00A0               	movwf	sprintf@f
   493  06F7  0841               	movf	main@m+1,w
   494  06F8  01A2               	clrf	?_sprintf+2
   495  06F9  07A2               	addwf	?_sprintf+2,f
   496  06FA  0840               	movf	main@m,w
   497  06FB  01A1               	clrf	?_sprintf+1
   498  06FC  07A1               	addwf	?_sprintf+1,f
   499  06FD  0845               	movf	main@s+1,w
   500  06FE  01A4               	clrf	?_sprintf+4
   501  06FF  07A4               	addwf	?_sprintf+4,f
   502  0700  0844               	movf	main@s,w
   503  0701  01A3               	clrf	?_sprintf+3
   504  0702  07A3               	addwf	?_sprintf+3,f
   505  0703  0843               	movf	main@a+1,w
   506  0704  01A6               	clrf	?_sprintf+6
   507  0705  07A6               	addwf	?_sprintf+6,f
   508  0706  0842               	movf	main@a,w
   509  0707  01A5               	clrf	?_sprintf+5
   510  0708  07A5               	addwf	?_sprintf+5,f
   511  0709  3036               	movlw	main@x& (0+255)
   512  070A  120A  118A  2723  120A  118A  	fcall	_sprintf
   513                           
   514                           ;stopwatch.c: 80: tx(x);
   515  070F  3036               	movlw	main@x& (0+255)
   516  0710  120A  118A  25ED  120A  118A  	fcall	_tx
   517  0715  3001               	movlw	1
   518  0716  1283               	bcf	3,5	;RP0=0, select bank0
   519  0717  1303               	bcf	3,6	;RP1=0, select bank0
   520  0718  07B4               	addwf	main@j,f
   521  0719  1803               	skipnc
   522  071A  0AB5               	incf	main@j+1,f
   523  071B  3000               	movlw	0
   524  071C  07B5               	addwf	main@j+1,f
   525  071D  2EC2               	goto	l875
   526  071E                     l43:	
   527                           
   528                           ;stopwatch.c: 82: }
   529                           ;stopwatch.c: 83: }
   530                           ;stopwatch.c: 86: if(RB1==0)
   531  071E  1886               	btfsc	6,1	;volatile
   532  071F  2EBA               	goto	l869
   533  0720                     l59:	
   534                           ;stopwatch.c: 87: {
   535                           ;stopwatch.c: 88: while(RB1==0);
   536                           
   537  0720  1C86               	btfss	6,1	;volatile
   538  0721  2F20               	goto	l59
   539  0722  2E92               	goto	L1
   540  0723                     __end_of_main:	
   541                           ;stopwatch.c: 93: tx(x);
   542                           
   543                           ;stopwatch.c: 92: sprintf(x,"%d:%d:%d\r",m,s,a);
   544                           
   545                           ;stopwatch.c: 91: m=0;
   546                           
   547                           ;stopwatch.c: 90: s=0;
   548                           
   549                           ;stopwatch.c: 89: a=0;
   550                           
   551                           
   552                           	psect	text1
   553  05D1                     __ptext1:	
   554 ;; *************** function _tx1 *****************
   555 ;; Defined at:
   556 ;;		line 27 in file "stopwatch.c"
   557 ;; Parameters:    Size  Location     Type
   558 ;;		None
   559 ;; Auto vars:     Size  Location     Type
   560 ;;  i               2    0[COMMON] int 
   561 ;; Return value:  Size  Location     Type
   562 ;;		None               void
   563 ;; Registers used:
   564 ;;		wreg, status,2, btemp+1
   565 ;; Tracked objects:
   566 ;;		On entry : 0/0
   567 ;;		On exit  : 0/0
   568 ;;		Unchanged: 0/0
   569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   570 ;;      Params:         0       0       0       0       0
   571 ;;      Locals:         2       0       0       0       0
   572 ;;      Temps:          0       0       0       0       0
   573 ;;      Totals:         2       0       0       0       0
   574 ;;Total ram usage:        2 bytes
   575 ;; Hardware stack levels used:    1
   576 ;; This function calls:
   577 ;;		Nothing
   578 ;; This function is called by:
   579 ;;		_main
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           
   584                           ;psect for function _tx1
   585  05D1                     _tx1:	
   586                           
   587                           ;stopwatch.c: 29: int i;
   588                           ;stopwatch.c: 30: for(i=0;i<12;i++)
   589                           
   590                           ;incstack = 0
   591                           ; Regs used in _tx1: [wreg+status,2+btemp+1]
   592  05D1  01F0               	clrf	tx1@i
   593  05D2  01F1               	clrf	tx1@i+1
   594  05D3                     L2:	
   595  05D3  0871               	movf	tx1@i+1,w
   596  05D4  3A80               	xorlw	128
   597  05D5  00FF               	movwf	127
   598  05D6  3080               	movlw	128
   599  05D7  027F               	subwf	127,w
   600  05D8  1D03               	skipz
   601  05D9  2DDC               	goto	u515
   602  05DA  300C               	movlw	12
   603  05DB  0270               	subwf	tx1@i,w
   604  05DC                     u515:	
   605  05DC  1803               	btfsc	3,0
   606  05DD  0008               	return
   607                           
   608                           ;stopwatch.c: 31: {
   609                           ;stopwatch.c: 32: TXREG='\b';
   610  05DE  3008               	movlw	8
   611  05DF  1283               	bcf	3,5	;RP0=0, select bank0
   612  05E0  1303               	bcf	3,6	;RP1=0, select bank0
   613  05E1  0099               	movwf	25	;volatile
   614  05E2                     l36:	
   615                           ;stopwatch.c: 33: while(TRMT==0);
   616                           
   617  05E2  1683               	bsf	3,5	;RP0=1, select bank1
   618  05E3  1303               	bcf	3,6	;RP1=0, select bank1
   619  05E4  1C98               	btfss	24,1	;volatile
   620  05E5  2DE2               	goto	l36
   621  05E6  3001               	movlw	1
   622  05E7  07F0               	addwf	tx1@i,f
   623  05E8  1803               	skipnc
   624  05E9  0AF1               	incf	tx1@i+1,f
   625  05EA  3000               	movlw	0
   626  05EB  07F1               	addwf	tx1@i+1,f
   627  05EC  2DD3               	goto	L2
   628  05ED                     __end_of_tx1:	
   629                           
   630                           	psect	text2
   631  05ED                     __ptext2:	
   632 ;; *************** function _tx *****************
   633 ;; Defined at:
   634 ;;		line 17 in file "stopwatch.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;  b               1    wreg     PTR unsigned char 
   637 ;;		 -> main@x(10), 
   638 ;; Auto vars:     Size  Location     Type
   639 ;;  b               1    3[COMMON] PTR unsigned char 
   640 ;;		 -> main@x(10), 
   641 ;;  i               2    1[COMMON] int 
   642 ;; Return value:  Size  Location     Type
   643 ;;		None               void
   644 ;; Registers used:
   645 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   651 ;;      Params:         0       0       0       0       0
   652 ;;      Locals:         3       0       0       0       0
   653 ;;      Temps:          1       0       0       0       0
   654 ;;      Totals:         4       0       0       0       0
   655 ;;Total ram usage:        4 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; This function calls:
   658 ;;		Nothing
   659 ;; This function is called by:
   660 ;;		_main
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664                           
   665                           ;psect for function _tx
   666  05ED                     _tx:	
   667                           
   668                           ;incstack = 0
   669                           ; Regs used in _tx: [wreg-fsr0h+status,2+status,0]
   670                           ;tx@b stored from wreg
   671  05ED  00F3               	movwf	tx@b
   672                           
   673                           ;stopwatch.c: 19: int i;
   674                           ;stopwatch.c: 20: for(i=0;b[i]!='\0';i++)
   675  05EE  01F1               	clrf	tx@i
   676  05EF  01F2               	clrf	tx@i+1
   677  05F0                     l785:	
   678  05F0  0871               	movf	tx@i,w
   679  05F1  0773               	addwf	tx@b,w
   680  05F2  00F0               	movwf	??_tx
   681  05F3  0870               	movf	??_tx,w
   682  05F4  0084               	movwf	4
   683  05F5  1383               	bcf	3,7	;select IRP bank0
   684  05F6  0880               	movf	0,f
   685  05F7  1903               	btfsc	3,2
   686  05F8  0008               	return
   687                           
   688                           ;stopwatch.c: 21: {
   689                           ;stopwatch.c: 22: TXREG=b[i];
   690  05F9  0871               	movf	tx@i,w
   691  05FA  0773               	addwf	tx@b,w
   692  05FB  00F0               	movwf	??_tx
   693  05FC  0870               	movf	??_tx,w
   694  05FD  0084               	movwf	4
   695  05FE  1383               	bcf	3,7	;select IRP bank0
   696  05FF  0800               	movf	0,w
   697  0600  1283               	bcf	3,5	;RP0=0, select bank0
   698  0601  1303               	bcf	3,6	;RP1=0, select bank0
   699  0602  0099               	movwf	25	;volatile
   700  0603                     l27:	
   701                           ;stopwatch.c: 23: while(TRMT==0);
   702                           
   703  0603  1683               	bsf	3,5	;RP0=1, select bank1
   704  0604  1303               	bcf	3,6	;RP1=0, select bank1
   705  0605  1C98               	btfss	24,1	;volatile
   706  0606  2E03               	goto	l27
   707  0607  3001               	movlw	1
   708  0608  07F1               	addwf	tx@i,f
   709  0609  1803               	skipnc
   710  060A  0AF2               	incf	tx@i+1,f
   711  060B  3000               	movlw	0
   712  060C  07F2               	addwf	tx@i+1,f
   713  060D  2DF0               	goto	l785
   714  060E                     __end_of_tx:	
   715                           
   716                           	psect	text3
   717  0723                     __ptext3:	
   718 ;; *************** function _sprintf *****************
   719 ;; Defined at:
   720 ;;		line 492 in file "/opt/microchip/xc8/v1.33/sources/common/doprnt.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;  sp              1    wreg     PTR unsigned char 
   723 ;;		 -> main@x(10), 
   724 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   725 ;;		 -> STR_3(10), STR_2(10), STR_1(10), 
   726 ;; Auto vars:     Size  Location     Type
   727 ;;  sp              1   17[BANK0 ] PTR unsigned char 
   728 ;;		 -> main@x(10), 
   729 ;;  _val            4   13[BANK0 ] struct .
   730 ;;  c               1   18[BANK0 ] char 
   731 ;;  prec            1   12[BANK0 ] char 
   732 ;;  flag            1   11[BANK0 ] unsigned char 
   733 ;;  ap              1   10[BANK0 ] PTR void [1]
   734 ;;		 -> ?_sprintf(2), 
   735 ;; Return value:  Size  Location     Type
   736 ;;                  2    0[BANK0 ] int 
   737 ;; Registers used:
   738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   744 ;;      Params:         0       7       0       0       0
   745 ;;      Locals:         0       9       0       0       0
   746 ;;      Temps:          0       3       0       0       0
   747 ;;      Totals:         0      19       0       0       0
   748 ;;Total ram usage:       19 bytes
   749 ;; Hardware stack levels used:    1
   750 ;; Hardware stack levels required when called:    1
   751 ;; This function calls:
   752 ;;		___lwdiv
   753 ;;		___lwmod
   754 ;; This function is called by:
   755 ;;		_main
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           
   760                           ;psect for function _sprintf
   761  0723                     _sprintf:	
   762                           
   763                           ;incstack = 0
   764                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   765                           ;sprintf@sp stored from wreg
   766  0723  1283               	bcf	3,5	;RP0=0, select bank0
   767  0724  1303               	bcf	3,6	;RP1=0, select bank0
   768  0725  00B1               	movwf	sprintf@sp
   769                           
   770                           ;doprnt.c: 494: va_list ap;
   771                           ;doprnt.c: 499: signed char c;
   772                           ;doprnt.c: 506: signed char prec;
   773                           ;doprnt.c: 508: unsigned char flag;
   774                           ;doprnt.c: 527: union {
   775                           ;doprnt.c: 528: unsigned int _val;
   776                           ;doprnt.c: 529: struct {
   777                           ;doprnt.c: 530: const char * _cp;
   778                           ;doprnt.c: 531: unsigned _len;
   779                           ;doprnt.c: 532: } _str;
   780                           ;doprnt.c: 533: } _val;
   781                           ;doprnt.c: 542: *ap = __va_start();
   782  0726  3021               	movlw	(?_sprintf+1)& (0+255)
   783  0727  00A7               	movwf	??_sprintf
   784  0728  0827               	movf	??_sprintf,w
   785  0729  00AA               	movwf	sprintf@ap
   786  072A                     l851:	
   787                           ;doprnt.c: 545: while(c = *f++) {
   788                           
   789  072A  3001               	movlw	1
   790  072B  07A0               	addwf	sprintf@f,f
   791  072C  30FF               	movlw	-1
   792  072D  0720               	addwf	sprintf@f,w
   793  072E  0084               	movwf	4
   794  072F  120A  118A  2003  120A  118A  	fcall	stringdir
   795  0734  00A7               	movwf	??_sprintf
   796  0735  0827               	movf	??_sprintf,w
   797  0736  00B2               	movwf	sprintf@c
   798  0737  08B2               	movf	sprintf@c,f
   799  0738  1903               	btfsc	3,2
   800  0739  2FF7               	goto	l853
   801                           
   802                           ;doprnt.c: 547: if(c != '%')
   803  073A  0832               	movf	sprintf@c,w
   804  073B  3A25               	xorlw	37
   805  073C  1903               	skipnz
   806  073D  2F4A               	goto	l807
   807                           
   808                           ;doprnt.c: 549: {
   809                           ;doprnt.c: 550: ((*sp++ = (c)));
   810  073E  0832               	movf	sprintf@c,w
   811  073F  00A7               	movwf	??_sprintf
   812  0740  0831               	movf	sprintf@sp,w
   813  0741  0084               	movwf	4
   814  0742  0827               	movf	??_sprintf,w
   815  0743  1383               	bcf	3,7	;select IRP bank0
   816  0744  0080               	movwf	0
   817  0745  3001               	movlw	1
   818  0746  00A7               	movwf	??_sprintf
   819  0747  0827               	movf	??_sprintf,w
   820  0748  07B1               	addwf	sprintf@sp,f
   821                           
   822                           ;doprnt.c: 551: continue;
   823  0749  2F2A               	goto	l851
   824  074A                     l807:	
   825                           
   826                           ;doprnt.c: 552: }
   827                           ;doprnt.c: 557: flag = 0;
   828  074A  01AB               	clrf	sprintf@flag
   829                           
   830                           ;doprnt.c: 831: }
   831                           
   832                           ;doprnt.c: 822: continue;
   833                           
   834                           ;doprnt.c: 811: default:
   835                           
   836                           ;doprnt.c: 707: case 'i':
   837                           ;doprnt.c: 708: break;
   838                           
   839                           ;doprnt.c: 706: case 'd':
   840                           
   841                           ;doprnt.c: 647: goto alldone;
   842                           
   843                           ;doprnt.c: 646: case 0:
   844                           
   845                           ;doprnt.c: 644: switch(c = *f++) {
   846  074B  3001               	movlw	1
   847  074C  07A0               	addwf	sprintf@f,f
   848  074D  30FF               	movlw	-1
   849  074E  0720               	addwf	sprintf@f,w
   850  074F  0084               	movwf	4
   851  0750  120A  118A  2003  120A  118A  	fcall	stringdir
   852  0755  00B2               	movwf	sprintf@c
   853                           
   854                           ; Switch size 1, requested type "space"
   855                           ; Number of cases is 3, Range of values is 0 to 105
   856                           ; switch strategies available:
   857                           ; Name         Instructions Cycles
   858                           ; simple_byte           10     6 (average)
   859                           ; jumptable            260     6 (fixed)
   860                           ;	Chosen strategy is simple_byte
   861  0756  3A00               	xorlw	0	; case 0
   862  0757  1903               	skipnz
   863  0758  2FF7               	goto	l853
   864  0759  3A64               	xorlw	100	; case 100
   865  075A  1903               	skipnz
   866  075B  2F60               	goto	l813
   867  075C  3A0D               	xorlw	13	; case 105
   868  075D  1903               	skipnz
   869  075E  2F60               	goto	l813
   870  075F  2F2A               	goto	l851
   871  0760                     l813:	
   872                           
   873                           ;doprnt.c: 1262: {
   874                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   875  0760  082A               	movf	sprintf@ap,w
   876  0761  0084               	movwf	4
   877  0762  1383               	bcf	3,7	;select IRP bank0
   878  0763  0800               	movf	0,w
   879  0764  00AD               	movwf	sprintf@_val
   880  0765  0A84               	incf	4,f
   881  0766  0800               	movf	0,w
   882  0767  00AE               	movwf	sprintf@_val+1
   883  0768  3002               	movlw	2
   884  0769  00A7               	movwf	??_sprintf
   885  076A  0827               	movf	??_sprintf,w
   886  076B  07AA               	addwf	sprintf@ap,f
   887                           
   888                           ;doprnt.c: 1270: if((int)_val._val < 0) {
   889  076C  1FAE               	btfss	sprintf@_val+1,7
   890  076D  2F77               	goto	l823
   891                           
   892                           ;doprnt.c: 1271: flag |= 0x03;
   893  076E  3003               	movlw	3
   894  076F  00A7               	movwf	??_sprintf
   895  0770  0827               	movf	??_sprintf,w
   896  0771  04AB               	iorwf	sprintf@flag,f
   897                           
   898                           ;doprnt.c: 1272: _val._val = -_val._val;
   899  0772  09AD               	comf	sprintf@_val,f
   900  0773  09AE               	comf	sprintf@_val+1,f
   901  0774  0AAD               	incf	sprintf@_val,f
   902  0775  1903               	skipnz
   903  0776  0AAE               	incf	sprintf@_val+1,f
   904  0777                     l823:	
   905                           
   906                           ;doprnt.c: 1273: }
   907                           ;doprnt.c: 1275: }
   908                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   909  0777  01B2               	clrf	sprintf@c
   910  0778  0AB2               	incf	sprintf@c,f
   911  0779  0832               	movf	sprintf@c,w
   912  077A  3A05               	xorlw	5
   913  077B  1903               	btfsc	3,2
   914  077C  2F9E               	goto	l835
   915  077D                     l827:	
   916                           
   917                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
   918  077D  0832               	movf	sprintf@c,w
   919  077E  00A7               	movwf	??_sprintf
   920  077F  0727               	addwf	??_sprintf,w
   921  0780  3E01               	addlw	low (_dpowers-__stringbase)
   922  0781  0084               	movwf	4
   923  0782  120A  118A  2003  120A  118A  	fcall	stringdir
   924  0787  00A8               	movwf	??_sprintf+1
   925  0788  120A  118A  2003  120A  118A  	fcall	stringdir
   926  078D  00A9               	movwf	??_sprintf+2
   927  078E  0829               	movf	??_sprintf+2,w
   928  078F  022E               	subwf	sprintf@_val+1,w
   929  0790  1D03               	skipz
   930  0791  2F94               	goto	u575
   931  0792  0828               	movf	??_sprintf+1,w
   932  0793  022D               	subwf	sprintf@_val,w
   933  0794                     u575:	
   934  0794  1C03               	btfss	3,0
   935  0795  2F9E               	goto	l835
   936                           
   937                           ;doprnt.c: 1316: break;
   938  0796  3001               	movlw	1
   939  0797  00A7               	movwf	??_sprintf
   940  0798  0827               	movf	??_sprintf,w
   941  0799  07B2               	addwf	sprintf@c,f
   942  079A  0832               	movf	sprintf@c,w
   943  079B  3A05               	xorlw	5
   944  079C  1D03               	skipz
   945  079D  2F7D               	goto	l827
   946  079E                     l835:	
   947                           
   948                           ;doprnt.c: 1431: {
   949                           ;doprnt.c: 1447: if(flag & 0x03)
   950  079E  082B               	movf	sprintf@flag,w
   951  079F  3903               	andlw	3
   952  07A0  1903               	btfsc	3,2
   953  07A1  2FAD               	goto	l841
   954                           
   955                           ;doprnt.c: 1448: ((*sp++ = ('-')));
   956  07A2  302D               	movlw	45
   957  07A3  00A7               	movwf	??_sprintf
   958  07A4  0831               	movf	sprintf@sp,w
   959  07A5  0084               	movwf	4
   960  07A6  0827               	movf	??_sprintf,w
   961  07A7  1383               	bcf	3,7	;select IRP bank0
   962  07A8  0080               	movwf	0
   963  07A9  3001               	movlw	1
   964  07AA  00A7               	movwf	??_sprintf
   965  07AB  0827               	movf	??_sprintf,w
   966  07AC  07B1               	addwf	sprintf@sp,f
   967  07AD                     l841:	
   968                           
   969                           ;doprnt.c: 1478: }
   970                           ;doprnt.c: 1481: prec = c;
   971  07AD  0832               	movf	sprintf@c,w
   972  07AE  00A7               	movwf	??_sprintf
   973  07AF  0827               	movf	??_sprintf,w
   974  07B0  00AC               	movwf	sprintf@prec
   975  07B1                     l849:	
   976                           ;doprnt.c: 1483: while(prec--) {
   977                           
   978  07B1  30FF               	movlw	-1
   979  07B2  00A7               	movwf	??_sprintf
   980  07B3  0827               	movf	??_sprintf,w
   981  07B4  07AC               	addwf	sprintf@prec,f
   982  07B5  082C               	movf	sprintf@prec,w
   983  07B6  3AFF               	xorlw	-1
   984  07B7  1903               	btfsc	3,2
   985  07B8  2F2A               	goto	l851
   986                           
   987                           ;doprnt.c: 1487: {
   988                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
   989  07B9  300A               	movlw	10
   990  07BA  00F8               	movwf	___lwmod@divisor
   991  07BB  3000               	movlw	0
   992  07BC  00F9               	movwf	___lwmod@divisor+1
   993  07BD  082C               	movf	sprintf@prec,w
   994  07BE  00A7               	movwf	??_sprintf
   995  07BF  0727               	addwf	??_sprintf,w
   996  07C0  3E01               	addlw	low (_dpowers-__stringbase)
   997  07C1  0084               	movwf	4
   998  07C2  120A  118A  2003  120A  118A  	fcall	stringdir
   999  07C7  00F0               	movwf	___lwdiv@divisor
  1000  07C8  120A  118A  2003  120A  118A  	fcall	stringdir
  1001  07CD  00F1               	movwf	___lwdiv@divisor+1
  1002  07CE  082E               	movf	sprintf@_val+1,w
  1003  07CF  01F3               	clrf	___lwdiv@dividend+1
  1004  07D0  07F3               	addwf	___lwdiv@dividend+1,f
  1005  07D1  082D               	movf	sprintf@_val,w
  1006  07D2  01F2               	clrf	___lwdiv@dividend
  1007  07D3  07F2               	addwf	___lwdiv@dividend,f
  1008  07D4  120A  118A  2642  120A  118A  	fcall	___lwdiv
  1009  07D9  0871               	movf	?___lwdiv+1,w
  1010  07DA  01FB               	clrf	___lwmod@dividend+1
  1011  07DB  07FB               	addwf	___lwmod@dividend+1,f
  1012  07DC  0870               	movf	?___lwdiv,w
  1013  07DD  01FA               	clrf	___lwmod@dividend
  1014  07DE  07FA               	addwf	___lwmod@dividend,f
  1015  07DF  120A  118A  260E  120A  118A  	fcall	___lwmod
  1016  07E4  0878               	movf	?___lwmod,w
  1017  07E5  3E30               	addlw	48
  1018  07E6  1283               	bcf	3,5	;RP0=0, select bank0
  1019  07E7  1303               	bcf	3,6	;RP1=0, select bank0
  1020  07E8  00A8               	movwf	??_sprintf+1
  1021  07E9  0828               	movf	??_sprintf+1,w
  1022  07EA  00B2               	movwf	sprintf@c
  1023                           
  1024                           ;doprnt.c: 1532: }
  1025                           ;doprnt.c: 1533: ((*sp++ = (c)));
  1026  07EB  0832               	movf	sprintf@c,w
  1027  07EC  00A7               	movwf	??_sprintf
  1028  07ED  0831               	movf	sprintf@sp,w
  1029  07EE  0084               	movwf	4
  1030  07EF  0827               	movf	??_sprintf,w
  1031  07F0  1383               	bcf	3,7	;select IRP bank0
  1032  07F1  0080               	movwf	0
  1033  07F2  3001               	movlw	1
  1034  07F3  00A7               	movwf	??_sprintf
  1035  07F4  0827               	movf	??_sprintf,w
  1036  07F5  07B1               	addwf	sprintf@sp,f
  1037  07F6  2FB1               	goto	l849
  1038  07F7                     l853:	
  1039                           ;doprnt.c: 1534: }
  1040                           ;doprnt.c: 1542: }
  1041                           ;doprnt.c: 1544: alldone:
  1042                           
  1043                           
  1044                           ;doprnt.c: 1547: *sp = 0;
  1045  07F7  0831               	movf	sprintf@sp,w
  1046  07F8  0084               	movwf	4
  1047  07F9  1383               	bcf	3,7	;select IRP bank0
  1048  07FA  0180               	clrf	0
  1049  07FB  0008               	return
  1050  07FC                     __end_of_sprintf:	
  1051                           ;doprnt.c: 1549: return 0;
  1052                           ;	Return value of _sprintf is never used
  1053                           
  1054                           
  1055                           	psect	text4
  1056  060E                     __ptext4:	
  1057 ;; *************** function ___lwmod *****************
  1058 ;; Defined at:
  1059 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/common/lwmod.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;  divisor         2    8[COMMON] unsigned int 
  1062 ;;  dividend        2   10[COMMON] unsigned int 
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;  counter         1   13[COMMON] unsigned char 
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  2    8[COMMON] unsigned int 
  1067 ;; Registers used:
  1068 ;;		wreg, status,2, status,0
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1074 ;;      Params:         4       0       0       0       0
  1075 ;;      Locals:         1       0       0       0       0
  1076 ;;      Temps:          1       0       0       0       0
  1077 ;;      Totals:         6       0       0       0       0
  1078 ;;Total ram usage:        6 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; This function calls:
  1081 ;;		Nothing
  1082 ;; This function is called by:
  1083 ;;		_sprintf
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           
  1088                           ;psect for function ___lwmod
  1089  060E                     ___lwmod:	
  1090                           
  1091                           ;incstack = 0
  1092                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1093  060E  0879               	movf	___lwmod@divisor+1,w
  1094  060F  0478               	iorwf	___lwmod@divisor,w
  1095  0610  1903               	skipnz
  1096  0611  2E3B               	goto	l775
  1097  0612  01FD               	clrf	___lwmod@counter
  1098  0613  0AFD               	incf	___lwmod@counter,f
  1099  0614                     l765:	
  1100  0614  1BF9               	btfsc	___lwmod@divisor+1,7
  1101  0615  2E22               	goto	l767
  1102  0616  3001               	movlw	1
  1103  0617                     u445:	
  1104  0617  1003               	clrc
  1105  0618  0DF8               	rlf	___lwmod@divisor,f
  1106  0619  0DF9               	rlf	___lwmod@divisor+1,f
  1107  061A  3EFF               	addlw	-1
  1108  061B  1D03               	skipz
  1109  061C  2E17               	goto	u445
  1110  061D  3001               	movlw	1
  1111  061E  00FC               	movwf	??___lwmod
  1112  061F  087C               	movf	??___lwmod,w
  1113  0620  07FD               	addwf	___lwmod@counter,f
  1114  0621  2E14               	goto	l765
  1115  0622                     l767:	
  1116  0622  0879               	movf	___lwmod@divisor+1,w
  1117  0623  027B               	subwf	___lwmod@dividend+1,w
  1118  0624  1D03               	skipz
  1119  0625  2E28               	goto	u465
  1120  0626  0878               	movf	___lwmod@divisor,w
  1121  0627  027A               	subwf	___lwmod@dividend,w
  1122  0628                     u465:	
  1123  0628  1C03               	skipc
  1124  0629  2E30               	goto	l771
  1125  062A  0878               	movf	___lwmod@divisor,w
  1126  062B  02FA               	subwf	___lwmod@dividend,f
  1127  062C  0879               	movf	___lwmod@divisor+1,w
  1128  062D  1C03               	skipc
  1129  062E  03FB               	decf	___lwmod@dividend+1,f
  1130  062F  02FB               	subwf	___lwmod@dividend+1,f
  1131  0630                     l771:	
  1132  0630  3001               	movlw	1
  1133  0631                     u475:	
  1134  0631  1003               	clrc
  1135  0632  0CF9               	rrf	___lwmod@divisor+1,f
  1136  0633  0CF8               	rrf	___lwmod@divisor,f
  1137  0634  3EFF               	addlw	-1
  1138  0635  1D03               	skipz
  1139  0636  2E31               	goto	u475
  1140  0637  3001               	movlw	1
  1141  0638  02FD               	subwf	___lwmod@counter,f
  1142  0639  1D03               	btfss	3,2
  1143  063A  2E22               	goto	l767
  1144  063B                     l775:	
  1145  063B  087B               	movf	___lwmod@dividend+1,w
  1146  063C  01F9               	clrf	?___lwmod+1
  1147  063D  07F9               	addwf	?___lwmod+1,f
  1148  063E  087A               	movf	___lwmod@dividend,w
  1149  063F  01F8               	clrf	?___lwmod
  1150  0640  07F8               	addwf	?___lwmod,f
  1151  0641  0008               	return
  1152  0642                     __end_of___lwmod:	
  1153                           
  1154                           	psect	text5
  1155  0642                     __ptext5:	
  1156 ;; *************** function ___lwdiv *****************
  1157 ;; Defined at:
  1158 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/common/lwdiv.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  divisor         2    0[COMMON] unsigned int 
  1161 ;;  dividend        2    2[COMMON] unsigned int 
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  quotient        2    5[COMMON] unsigned int 
  1164 ;;  counter         1    7[COMMON] unsigned char 
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  2    0[COMMON] unsigned int 
  1167 ;; Registers used:
  1168 ;;		wreg, status,2, status,0
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1174 ;;      Params:         4       0       0       0       0
  1175 ;;      Locals:         3       0       0       0       0
  1176 ;;      Temps:          1       0       0       0       0
  1177 ;;      Totals:         8       0       0       0       0
  1178 ;;Total ram usage:        8 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; This function calls:
  1181 ;;		Nothing
  1182 ;; This function is called by:
  1183 ;;		_sprintf
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           
  1188                           ;psect for function ___lwdiv
  1189  0642                     ___lwdiv:	
  1190                           
  1191                           ;incstack = 0
  1192                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1193  0642  01F5               	clrf	___lwdiv@quotient
  1194  0643  01F6               	clrf	___lwdiv@quotient+1
  1195  0644  0871               	movf	___lwdiv@divisor+1,w
  1196  0645  0470               	iorwf	___lwdiv@divisor,w
  1197  0646  1903               	skipnz
  1198  0647  2E79               	goto	l753
  1199  0648  01F7               	clrf	___lwdiv@counter
  1200  0649  0AF7               	incf	___lwdiv@counter,f
  1201  064A                     l741:	
  1202  064A  1BF1               	btfsc	___lwdiv@divisor+1,7
  1203  064B  2E58               	goto	l743
  1204  064C  3001               	movlw	1
  1205  064D                     u375:	
  1206  064D  1003               	clrc
  1207  064E  0DF0               	rlf	___lwdiv@divisor,f
  1208  064F  0DF1               	rlf	___lwdiv@divisor+1,f
  1209  0650  3EFF               	addlw	-1
  1210  0651  1D03               	skipz
  1211  0652  2E4D               	goto	u375
  1212  0653  3001               	movlw	1
  1213  0654  00F4               	movwf	??___lwdiv
  1214  0655  0874               	movf	??___lwdiv,w
  1215  0656  07F7               	addwf	___lwdiv@counter,f
  1216  0657  2E4A               	goto	l741
  1217  0658                     l743:	
  1218  0658  3001               	movlw	1
  1219  0659                     u395:	
  1220  0659  1003               	clrc
  1221  065A  0DF5               	rlf	___lwdiv@quotient,f
  1222  065B  0DF6               	rlf	___lwdiv@quotient+1,f
  1223  065C  3EFF               	addlw	-1
  1224  065D  1D03               	skipz
  1225  065E  2E59               	goto	u395
  1226  065F  0871               	movf	___lwdiv@divisor+1,w
  1227  0660  0273               	subwf	___lwdiv@dividend+1,w
  1228  0661  1D03               	skipz
  1229  0662  2E65               	goto	u405
  1230  0663  0870               	movf	___lwdiv@divisor,w
  1231  0664  0272               	subwf	___lwdiv@dividend,w
  1232  0665                     u405:	
  1233  0665  1C03               	skipc
  1234  0666  2E6E               	goto	l749
  1235  0667  0870               	movf	___lwdiv@divisor,w
  1236  0668  02F2               	subwf	___lwdiv@dividend,f
  1237  0669  0871               	movf	___lwdiv@divisor+1,w
  1238  066A  1C03               	skipc
  1239  066B  03F3               	decf	___lwdiv@dividend+1,f
  1240  066C  02F3               	subwf	___lwdiv@dividend+1,f
  1241  066D  1475               	bsf	___lwdiv@quotient,0
  1242  066E                     l749:	
  1243  066E  3001               	movlw	1
  1244  066F                     u415:	
  1245  066F  1003               	clrc
  1246  0670  0CF1               	rrf	___lwdiv@divisor+1,f
  1247  0671  0CF0               	rrf	___lwdiv@divisor,f
  1248  0672  3EFF               	addlw	-1
  1249  0673  1D03               	skipz
  1250  0674  2E6F               	goto	u415
  1251  0675  3001               	movlw	1
  1252  0676  02F7               	subwf	___lwdiv@counter,f
  1253  0677  1D03               	btfss	3,2
  1254  0678  2E58               	goto	l743
  1255  0679                     l753:	
  1256  0679  0876               	movf	___lwdiv@quotient+1,w
  1257  067A  01F1               	clrf	?___lwdiv+1
  1258  067B  07F1               	addwf	?___lwdiv+1,f
  1259  067C  0875               	movf	___lwdiv@quotient,w
  1260  067D  01F0               	clrf	?___lwdiv
  1261  067E  07F0               	addwf	?___lwdiv,f
  1262  067F  0008               	return
  1263  0680                     __end_of___lwdiv:	
  1264  007E                     btemp	set	126	;btemp
  1265  007E                     wtemp	set	126
  1266  007E                     wtemp0	set	126
  1267  0080                     wtemp1	set	128
  1268  0082                     wtemp2	set	130
  1269  0084                     wtemp3	set	132
  1270  0086                     wtemp4	set	134
  1271  0088                     wtemp5	set	136
  1272  007F                     wtemp6	set	127
  1273  007E                     ttemp	set	126
  1274  007E                     ttemp0	set	126
  1275  0081                     ttemp1	set	129
  1276  0084                     ttemp2	set	132
  1277  0087                     ttemp3	set	135
  1278  007F                     ttemp4	set	127
  1279  007E                     ltemp	set	126
  1280  007E                     ltemp0	set	126
  1281  0082                     ltemp1	set	130
  1282  0086                     ltemp2	set	134
  1283  0080                     ltemp3	set	128


Data Sizes:
    Strings     10
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     38      38
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_3(CODE[10]), STR_2(CODE[10]), STR_1(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@x(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S69$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    tx@b	PTR unsigned char  size(1) Largest target is 10
		 -> main@x(BANK0[10]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0    1864
                                             19 BANK0     19    19      0
                            _sprintf
                                 _tx
                                _tx1
 ---------------------------------------------------------------------------------
 (1) _tx1                                                  2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _tx                                                   4     4      0     171
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    12      7    1250
                                              0 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _tx
   _tx1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     26      26       5       47.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Jan  7 07:11:12 2021

                      pc 0002              __CFG_CP$OFF 0000                       l27 0603  
                     l43 071E                       l36 05E2                       l44 06BE  
                     l54 06F0                       l59 0720                       _tx 05ED  
                     fsr 0004                      ?_tx 0070                      l741 064A  
                    l813 0760                      l743 0658                      l823 0777  
                    l807 074A                      l753 0679                      l841 07AD  
                    l771 0630                      l835 079E                      l827 077D  
                    l851 072A                      l749 066E                      l765 0614  
                    l853 07F7                      l767 0622                      l775 063B  
                    l849 07B1                      l785 05F0                      l875 06C2  
                    l877 06C7                      l869 06BA                      l895 06EE  
                    l899 06F3                      _RB0 0030                      _RB1 0031  
                    u405 0665                      u415 066F             __CFG_CPD$OFF 0000  
                    u515 05DC                      u445 0617                      u375 064D  
                    u465 0628                      u395 0659                      u475 0631  
                    u575 0794                      _tx1 05D1                      fsr0 0004  
                    indf 0000                      tx@b 0073                      tx@i 0071  
           __CFG_FOSC$XT 0000                     ??_tx 0070             __CFG_LVP$OFF 0000  
                   ?_tx1 0070                     STR_1 0013                     STR_2 0013  
                   STR_3 0013                     _TMR0 0001                     _TRMT 04C1  
           __CFG_WRT$OFF 0000                     _main 0680                     btemp 007E  
                   tx1@i 0070                     ltemp 007E                     start 0000  
                   ttemp 007E                     wtemp 007E                    ??_tx1 0070  
                  ?_main 0070            __CFG_WDTE$OFF 0000          __end_of___lwdiv 0680  
        __end_of___lwmod 0642                    _RCSTA 0018                    _SPBRG 0099  
                  _TRISB 0086                    _TXREG 0019                    _TXSTA 0098  
        __end_of_dpowers 0013                    main@a 0042                    main@j 0034  
                  main@m 0040                    main@s 0044                    main@x 0036  
         __CFG_BOREN$OFF 0000                    pclath 000A                    ltemp0 007E  
                  ltemp1 0082                    ltemp2 0086                    ltemp3 0080  
                  ttemp0 007E                    ttemp1 0081                    ttemp2 0084  
                  ttemp3 0087                    ttemp4 007F                    status 0003  
                  wtemp0 007E                    wtemp1 0080                    wtemp2 0082  
                  wtemp3 0084                    wtemp4 0086                    wtemp5 0088  
                  wtemp6 007F          __end_of_sprintf 07FC          __initialization 07FC  
           __end_of_main 0723                   ??_main 0033           __CFG_PWRTE$OFF 0000  
              ??___lwdiv 0074                ??___lwmod 007C                ??_sprintf 0027  
__end_of__initialization 07FC           __pcstackCOMMON 0070               __end_of_tx 060E  
             __pmaintext 0680               __stringtab 0003                  ___lwdiv 0642  
                ___lwmod 060E                  __ptext1 05D1                  __ptext2 05ED  
                __ptext3 0723                  __ptext4 060E                  __ptext5 0642  
                _dpowers 0009             __size_of_tx1 001C                  _sprintf 0723  
   end_of_initialization 07FC      start_initialization 07FC              __end_of_tx1 05ED  
              ___latbits 0002            __pcstackBANK0 0020      __end_of__stringdata 001D  
            sprintf@_val 002D              sprintf@flag 002B              sprintf@prec 002C  
       ___lwdiv@dividend 0072                 ?___lwdiv 0070                 ?___lwmod 0078  
              __pstrings 0003         ___lwdiv@quotient 0075                 ?_sprintf 0020  
            __size_of_tx 0021              __stringbase 0008              __stringdata 0013  
       __size_of___lwdiv 003E         __size_of___lwmod 0034       __end_of__stringtab 0009  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0077         __size_of_sprintf 00D9  
          __size_of_main 00A3                sprintf@ap 002A                sprintf@sp 0031  
       ___lwmod@dividend 007A                stringcode 0003               _OPTION_REG 0081  
               sprintf@c 0032                 sprintf@f 0020          ___lwmod@divisor 0078  
        ___lwmod@counter 007D                 stringdir 0003                 stringtab 0003  
