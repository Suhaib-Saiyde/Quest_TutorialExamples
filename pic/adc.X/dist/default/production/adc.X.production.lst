

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Jan  5 07:38:21 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F876A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     	;# 
    15  0001                     	;# 
    16  0002                     	;# 
    17  0003                     	;# 
    18  0004                     	;# 
    19  0005                     	;# 
    20  0006                     	;# 
    21  0007                     	;# 
    22  000A                     	;# 
    23  000B                     	;# 
    24  000C                     	;# 
    25  000D                     	;# 
    26  000E                     	;# 
    27  000E                     	;# 
    28  000F                     	;# 
    29  0010                     	;# 
    30  0011                     	;# 
    31  0012                     	;# 
    32  0013                     	;# 
    33  0014                     	;# 
    34  0015                     	;# 
    35  0015                     	;# 
    36  0016                     	;# 
    37  0017                     	;# 
    38  0018                     	;# 
    39  0019                     	;# 
    40  001A                     	;# 
    41  001B                     	;# 
    42  001B                     	;# 
    43  001C                     	;# 
    44  001D                     	;# 
    45  001E                     	;# 
    46  001F                     	;# 
    47  0081                     	;# 
    48  0085                     	;# 
    49  0086                     	;# 
    50  0087                     	;# 
    51  008C                     	;# 
    52  008D                     	;# 
    53  008E                     	;# 
    54  0091                     	;# 
    55  0092                     	;# 
    56  0093                     	;# 
    57  0094                     	;# 
    58  0098                     	;# 
    59  0099                     	;# 
    60  009C                     	;# 
    61  009D                     	;# 
    62  009E                     	;# 
    63  009F                     	;# 
    64  010C                     	;# 
    65  010D                     	;# 
    66  010E                     	;# 
    67  010F                     	;# 
    68  018C                     	;# 
    69  018D                     	;# 
    70                           
    71                           	psect	strings
    72  0003                     __pstrings:	
    73  0003                     stringtab:	
    74  0003                     __stringtab:	
    75  0003                     stringcode:	
    76                           ;	String table - string pointers are 1 byte each
    77                           
    78  0003                     stringdir:	
    79  0003  3000               	movlw	high stringdir
    80  0004  008A               	movwf	10
    81  0005  0804               	movf	4,w
    82  0006  0A84               	incf	4,f
    83  0007  0782               	addwf	2,f
    84  0008                     __stringbase:	
    85  0008  3400               	retlw	0
    86  0009                     __end_of__stringtab:	
    87  0009                     _dpowers:	
    88  0009  3401               	retlw	1
    89  000A  3400               	retlw	0
    90  000B  340A               	retlw	10
    91  000C  3400               	retlw	0
    92  000D  3464               	retlw	100
    93  000E  3400               	retlw	0
    94  000F  34E8               	retlw	232
    95  0010  3403               	retlw	3
    96  0011  3410               	retlw	16
    97  0012  3427               	retlw	39
    98  0013                     __end_of_dpowers:	
    99  001F                     _ADCON0	set	31
   100  001E                     _ADRESH	set	30
   101  0018                     _RCSTA	set	24
   102  0019                     _TXREG	set	25
   103  00FB                     _CHS0	set	251
   104  00FC                     _CHS1	set	252
   105  00FD                     _CHS2	set	253
   106  00FA                     _GO	set	250
   107  009F                     _ADCON1	set	159
   108  009E                     _ADRESL	set	158
   109  0099                     _SPBRG	set	153
   110  0098                     _TXSTA	set	152
   111  04C1                     _TRMT	set	1217
   112  0013                     __stringdata:	
   113  0013                     STR_1:	
   114  0013  3441               	retlw	65	;'A'
   115  0014  3444               	retlw	68	;'D'
   116  0015  3443               	retlw	67	;'C'
   117  0016  3431               	retlw	49	;'1'
   118  0017  343D               	retlw	61	;'='
   119  0018  3425               	retlw	37	;'%'
   120  0019  3464               	retlw	100	;'d'
   121  001A  340D               	retlw	13
   122  001B  340A               	retlw	10
   123  001C  3400               	retlw	0
   124  001D                     __end_of__stringdata:	
   125                           
   126                           ; #config settings
   127  0000                     
   128                           	psect	cinit
   129  07FC                     start_initialization:	
   130  07FC                     __initialization:	
   131  07FC                     end_of_initialization:	
   132                           ;End of C runtime variable initialization code
   133                           
   134  07FC                     __end_of__initialization:	
   135  07FC  0183               	clrf	3
   136  07FD  120A  118A  2EDA   	ljmp	_main	;jump to C main() function
   137                           
   138                           	psect	cstackCOMMON
   139  0070                     __pcstackCOMMON:	
   140  0070                     ?_tx:	
   141  0070                     ??_tx:	
   142                           ; 0 bytes @ 0x0
   143                           
   144  0070                     ?_main:	
   145                           ; 0 bytes @ 0x0
   146                           
   147  0070                     ?___lwdiv:	
   148                           ; 0 bytes @ 0x0
   149                           
   150  0070                     ___lwdiv@divisor:	
   151                           ; 2 bytes @ 0x0
   152                           
   153                           
   154                           ; 2 bytes @ 0x0
   155  0070                     	ds	1
   156  0071                     tx@i:	
   157                           
   158                           ; 2 bytes @ 0x1
   159  0071                     	ds	1
   160  0072                     ___lwdiv@dividend:	
   161                           
   162                           ; 2 bytes @ 0x2
   163  0072                     	ds	1
   164  0073                     tx@x:	
   165                           
   166                           ; 1 bytes @ 0x3
   167  0073                     	ds	1
   168  0074                     ??___lwdiv:	
   169                           
   170                           ; 0 bytes @ 0x4
   171  0074                     	ds	1
   172  0075                     ___lwdiv@quotient:	
   173                           
   174                           ; 2 bytes @ 0x5
   175  0075                     	ds	2
   176  0077                     ___lwdiv@counter:	
   177                           
   178                           ; 1 bytes @ 0x7
   179  0077                     	ds	1
   180  0078                     ?___lwmod:	
   181  0078                     ___lwmod@divisor:	
   182                           ; 2 bytes @ 0x8
   183                           
   184                           
   185                           ; 2 bytes @ 0x8
   186  0078                     	ds	2
   187  007A                     ___lwmod@dividend:	
   188                           
   189                           ; 2 bytes @ 0xA
   190  007A                     	ds	2
   191  007C                     ??___lwmod:	
   192                           
   193                           ; 0 bytes @ 0xC
   194  007C                     	ds	1
   195  007D                     ___lwmod@counter:	
   196                           
   197                           ; 1 bytes @ 0xD
   198  007D                     	ds	1
   199                           
   200                           	psect	cstackBANK0
   201  0020                     __pcstackBANK0:	
   202  0020                     ?_sprintf:	
   203  0020                     sprintf@f:	
   204                           ; 2 bytes @ 0x0
   205                           
   206                           
   207                           ; 1 bytes @ 0x0
   208  0020                     	ds	3
   209  0023                     ??_sprintf:	
   210                           
   211                           ; 0 bytes @ 0x3
   212  0023                     	ds	3
   213  0026                     sprintf@ap:	
   214                           
   215                           ; 1 bytes @ 0x6
   216  0026                     	ds	1
   217  0027                     sprintf@flag:	
   218                           
   219                           ; 1 bytes @ 0x7
   220  0027                     	ds	1
   221  0028                     sprintf@prec:	
   222                           
   223                           ; 1 bytes @ 0x8
   224  0028                     	ds	1
   225  0029                     sprintf@_val:	
   226                           
   227                           ; 4 bytes @ 0x9
   228  0029                     	ds	4
   229  002D                     sprintf@sp:	
   230                           
   231                           ; 1 bytes @ 0xD
   232  002D                     	ds	1
   233  002E                     sprintf@c:	
   234                           
   235                           ; 1 bytes @ 0xE
   236  002E                     	ds	1
   237  002F                     ??_main:	
   238                           
   239                           ; 0 bytes @ 0xF
   240  002F                     	ds	3
   241  0032                     main@a:	
   242                           
   243                           ; 20 bytes @ 0x12
   244  0032                     	ds	20
   245  0046                     main@x:	
   246                           
   247                           ; 2 bytes @ 0x26
   248  0046                     	ds	2
   249                           
   250                           	psect	maintext
   251  06DA                     __pmaintext:	
   252 ;;
   253 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   254 ;;
   255 ;; *************** function _main *****************
   256 ;; Defined at:
   257 ;;		line 26 in file "adc.c"
   258 ;; Parameters:    Size  Location     Type
   259 ;;		None
   260 ;; Auto vars:     Size  Location     Type
   261 ;;  a              20   18[BANK0 ] unsigned char [20]
   262 ;;  x               2   38[BANK0 ] int 
   263 ;; Return value:  Size  Location     Type
   264 ;;		None               void
   265 ;; Registers used:
   266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : 17F/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   272 ;;      Params:         0       0       0       0       0
   273 ;;      Locals:         0      22       0       0       0
   274 ;;      Temps:          0       3       0       0       0
   275 ;;      Totals:         0      25       0       0       0
   276 ;;Total ram usage:       25 bytes
   277 ;; Hardware stack levels required when called:    2
   278 ;; This function calls:
   279 ;;		_sprintf
   280 ;;		_tx
   281 ;; This function is called by:
   282 ;;		Startup code after reset
   283 ;; This function uses a non-reentrant model
   284 ;;
   285                           
   286                           
   287                           ;psect for function _main
   288  06DA                     _main:	
   289                           
   290                           ;adc.c: 28: int x;
   291                           ;adc.c: 29: char a[20];
   292                           ;adc.c: 30: ADCON0=0x41;
   293                           
   294                           ;incstack = 0
   295                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   296  06DA  3041               	movlw	65
   297  06DB  1283               	bcf	3,5	;RP0=0, select bank0
   298  06DC  1303               	bcf	3,6	;RP1=0, select bank0
   299  06DD  009F               	movwf	31	;volatile
   300                           
   301                           ;adc.c: 31: ADCON1=0x80;
   302  06DE  3080               	movlw	128
   303  06DF  1683               	bsf	3,5	;RP0=1, select bank1
   304  06E0  1303               	bcf	3,6	;RP1=0, select bank1
   305  06E1  009F               	movwf	31	;volatile
   306                           
   307                           ;adc.c: 32: TXSTA=0x24;
   308  06E2  3024               	movlw	36
   309  06E3  0098               	movwf	24	;volatile
   310                           
   311                           ;adc.c: 33: RCSTA=0x90;
   312  06E4  3090               	movlw	144
   313  06E5  1283               	bcf	3,5	;RP0=0, select bank0
   314  06E6  1303               	bcf	3,6	;RP1=0, select bank0
   315  06E7  0098               	movwf	24	;volatile
   316                           
   317                           ;adc.c: 34: SPBRG=25;
   318  06E8  3019               	movlw	25
   319  06E9  1683               	bsf	3,5	;RP0=1, select bank1
   320  06EA  1303               	bcf	3,6	;RP1=0, select bank1
   321  06EB  0099               	movwf	25	;volatile
   322  06EC                     l781:	
   323                           ;adc.c: 35: while(1)
   324                           
   325                           
   326                           ;adc.c: 36: {
   327                           ;adc.c: 37: CHS2=0;CHS1=0;CHS0=0;
   328  06EC  1283               	bcf	3,5	;RP0=0, select bank0
   329  06ED  1303               	bcf	3,6	;RP1=0, select bank0
   330  06EE  129F               	bcf	31,5	;volatile
   331  06EF  121F               	bcf	31,4	;volatile
   332  06F0  119F               	bcf	31,3	;volatile
   333                           
   334                           ;adc.c: 38: GO=1;
   335  06F1  151F               	bsf	31,2	;volatile
   336  06F2                     l43:	
   337                           ;adc.c: 39: while(GO==1);
   338                           
   339  06F2  191F               	btfsc	31,2	;volatile
   340  06F3  2EF2               	goto	l43
   341                           
   342                           ;adc.c: 40: x=(ADRESH<<8)|ADRESL;
   343  06F4  081E               	movf	30,w	;volatile
   344  06F5  01C7               	clrf	main@x+1
   345  06F6  07C7               	addwf	main@x+1,f
   346  06F7  1683               	bsf	3,5	;RP0=1, select bank1
   347  06F8  1303               	bcf	3,6	;RP1=0, select bank1
   348  06F9  081E               	movf	30,w	;volatile
   349  06FA  1283               	bcf	3,5	;RP0=0, select bank0
   350  06FB  1303               	bcf	3,6	;RP1=0, select bank0
   351  06FC  01C6               	clrf	main@x
   352  06FD  07C6               	addwf	main@x,f
   353                           
   354                           ;adc.c: 41: sprintf(a,"ADC1=%d\r\n",x);
   355  06FE  300B               	movlw	(STR_1-__stringbase)& (0+255)
   356  06FF  00AF               	movwf	??_main
   357  0700  082F               	movf	??_main,w
   358  0701  00A0               	movwf	sprintf@f
   359  0702  0847               	movf	main@x+1,w
   360  0703  01A2               	clrf	?_sprintf+2
   361  0704  07A2               	addwf	?_sprintf+2,f
   362  0705  0846               	movf	main@x,w
   363  0706  01A1               	clrf	?_sprintf+1
   364  0707  07A1               	addwf	?_sprintf+1,f
   365  0708  3032               	movlw	main@a& (0+255)
   366  0709  120A  118A  2723  120A  118A  	fcall	_sprintf
   367                           
   368                           ;adc.c: 42: tx(a);
   369  070E  3032               	movlw	main@a& (0+255)
   370  070F  120A  118A  2647  120A  118A  	fcall	_tx
   371                           
   372                           ;adc.c: 43: _delay((unsigned long)((300)*(4000000/4000.0)));
   373  0714  3002               	movlw	2
   374  0715  1283               	bcf	3,5	;RP0=0, select bank0
   375  0716  1303               	bcf	3,6	;RP1=0, select bank0
   376  0717  00B1               	movwf	??_main+2
   377  0718  3086               	movlw	134
   378  0719  00B0               	movwf	??_main+1
   379  071A  3099               	movlw	153
   380  071B  00AF               	movwf	??_main
   381  071C                     u497:	
   382  071C  0BAF               	decfsz	??_main,f
   383  071D  2F1C               	goto	u497
   384  071E  0BB0               	decfsz	??_main+1,f
   385  071F  2F1C               	goto	u497
   386  0720  0BB1               	decfsz	??_main+2,f
   387  0721  2F1C               	goto	u497
   388  0722  2EEC               	goto	l781
   389  0723                     __end_of_main:	
   390                           
   391                           	psect	text1
   392  0647                     __ptext1:	
   393 ;; *************** function _tx *****************
   394 ;; Defined at:
   395 ;;		line 17 in file "adc.c"
   396 ;; Parameters:    Size  Location     Type
   397 ;;  x               1    wreg     PTR unsigned char 
   398 ;;		 -> main@a(20), 
   399 ;; Auto vars:     Size  Location     Type
   400 ;;  x               1    3[COMMON] PTR unsigned char 
   401 ;;		 -> main@a(20), 
   402 ;;  i               2    1[COMMON] int 
   403 ;; Return value:  Size  Location     Type
   404 ;;		None               void
   405 ;; Registers used:
   406 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   407 ;; Tracked objects:
   408 ;;		On entry : 0/0
   409 ;;		On exit  : 0/0
   410 ;;		Unchanged: 0/0
   411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   412 ;;      Params:         0       0       0       0       0
   413 ;;      Locals:         3       0       0       0       0
   414 ;;      Temps:          1       0       0       0       0
   415 ;;      Totals:         4       0       0       0       0
   416 ;;Total ram usage:        4 bytes
   417 ;; Hardware stack levels used:    1
   418 ;; This function calls:
   419 ;;		Nothing
   420 ;; This function is called by:
   421 ;;		_main
   422 ;; This function uses a non-reentrant model
   423 ;;
   424                           
   425                           
   426                           ;psect for function _tx
   427  0647                     _tx:	
   428                           
   429                           ;incstack = 0
   430                           ; Regs used in _tx: [wreg-fsr0h+status,2+status,0]
   431                           ;tx@x stored from wreg
   432  0647  00F3               	movwf	tx@x
   433                           
   434                           ;adc.c: 19: int i;
   435                           ;adc.c: 20: for(i=0;x[i]!='\0';i++)
   436  0648  01F1               	clrf	tx@i
   437  0649  01F2               	clrf	tx@i+1
   438  064A                     l719:	
   439  064A  0871               	movf	tx@i,w
   440  064B  0773               	addwf	tx@x,w
   441  064C  00F0               	movwf	??_tx
   442  064D  0870               	movf	??_tx,w
   443  064E  0084               	movwf	4
   444  064F  1383               	bcf	3,7	;select IRP bank0
   445  0650  0880               	movf	0,f
   446  0651  1903               	btfsc	3,2
   447  0652  0008               	return
   448                           
   449                           ;adc.c: 21: {
   450                           ;adc.c: 22: TXREG=x[i];
   451  0653  0871               	movf	tx@i,w
   452  0654  0773               	addwf	tx@x,w
   453  0655  00F0               	movwf	??_tx
   454  0656  0870               	movf	??_tx,w
   455  0657  0084               	movwf	4
   456  0658  1383               	bcf	3,7	;select IRP bank0
   457  0659  0800               	movf	0,w
   458  065A  1283               	bcf	3,5	;RP0=0, select bank0
   459  065B  1303               	bcf	3,6	;RP1=0, select bank0
   460  065C  0099               	movwf	25	;volatile
   461  065D                     l35:	
   462                           ;adc.c: 23: while(TRMT==0);
   463                           
   464  065D  1683               	bsf	3,5	;RP0=1, select bank1
   465  065E  1303               	bcf	3,6	;RP1=0, select bank1
   466  065F  1C98               	btfss	24,1	;volatile
   467  0660  2E5D               	goto	l35
   468  0661  3001               	movlw	1
   469  0662  07F1               	addwf	tx@i,f
   470  0663  1803               	skipnc
   471  0664  0AF2               	incf	tx@i+1,f
   472  0665  3000               	movlw	0
   473  0666  07F2               	addwf	tx@i+1,f
   474  0667  2E4A               	goto	l719
   475  0668                     __end_of_tx:	
   476                           
   477                           	psect	text2
   478  0723                     __ptext2:	
   479 ;; *************** function _sprintf *****************
   480 ;; Defined at:
   481 ;;		line 492 in file "/opt/microchip/xc8/v1.33/sources/common/doprnt.c"
   482 ;; Parameters:    Size  Location     Type
   483 ;;  sp              1    wreg     PTR unsigned char 
   484 ;;		 -> main@a(20), 
   485 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   486 ;;		 -> STR_1(10), 
   487 ;; Auto vars:     Size  Location     Type
   488 ;;  sp              1   13[BANK0 ] PTR unsigned char 
   489 ;;		 -> main@a(20), 
   490 ;;  _val            4    9[BANK0 ] struct .
   491 ;;  c               1   14[BANK0 ] char 
   492 ;;  prec            1    8[BANK0 ] char 
   493 ;;  flag            1    7[BANK0 ] unsigned char 
   494 ;;  ap              1    6[BANK0 ] PTR void [1]
   495 ;;		 -> ?_sprintf(2), 
   496 ;; Return value:  Size  Location     Type
   497 ;;                  2    0[BANK0 ] int 
   498 ;; Registers used:
   499 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   505 ;;      Params:         0       3       0       0       0
   506 ;;      Locals:         0       9       0       0       0
   507 ;;      Temps:          0       3       0       0       0
   508 ;;      Totals:         0      15       0       0       0
   509 ;;Total ram usage:       15 bytes
   510 ;; Hardware stack levels used:    1
   511 ;; Hardware stack levels required when called:    1
   512 ;; This function calls:
   513 ;;		___lwdiv
   514 ;;		___lwmod
   515 ;; This function is called by:
   516 ;;		_main
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520                           
   521                           ;psect for function _sprintf
   522  0723                     _sprintf:	
   523                           
   524                           ;incstack = 0
   525                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   526                           ;sprintf@sp stored from wreg
   527  0723  1283               	bcf	3,5	;RP0=0, select bank0
   528  0724  1303               	bcf	3,6	;RP1=0, select bank0
   529  0725  00AD               	movwf	sprintf@sp
   530                           
   531                           ;doprnt.c: 494: va_list ap;
   532                           ;doprnt.c: 499: signed char c;
   533                           ;doprnt.c: 506: signed char prec;
   534                           ;doprnt.c: 508: unsigned char flag;
   535                           ;doprnt.c: 527: union {
   536                           ;doprnt.c: 528: unsigned int _val;
   537                           ;doprnt.c: 529: struct {
   538                           ;doprnt.c: 530: const char * _cp;
   539                           ;doprnt.c: 531: unsigned _len;
   540                           ;doprnt.c: 532: } _str;
   541                           ;doprnt.c: 533: } _val;
   542                           ;doprnt.c: 542: *ap = __va_start();
   543  0726  3021               	movlw	(?_sprintf+1)& (0+255)
   544  0727  00A3               	movwf	??_sprintf
   545  0728  0823               	movf	??_sprintf,w
   546  0729  00A6               	movwf	sprintf@ap
   547  072A                     l773:	
   548                           ;doprnt.c: 545: while(c = *f++) {
   549                           
   550  072A  3001               	movlw	1
   551  072B  07A0               	addwf	sprintf@f,f
   552  072C  30FF               	movlw	-1
   553  072D  0720               	addwf	sprintf@f,w
   554  072E  0084               	movwf	4
   555  072F  120A  118A  2003  120A  118A  	fcall	stringdir
   556  0734  00A3               	movwf	??_sprintf
   557  0735  0823               	movf	??_sprintf,w
   558  0736  00AE               	movwf	sprintf@c
   559  0737  08AE               	movf	sprintf@c,f
   560  0738  1903               	btfsc	3,2
   561  0739  2FF7               	goto	l775
   562                           
   563                           ;doprnt.c: 547: if(c != '%')
   564  073A  082E               	movf	sprintf@c,w
   565  073B  3A25               	xorlw	37
   566  073C  1903               	skipnz
   567  073D  2F4A               	goto	l729
   568                           
   569                           ;doprnt.c: 549: {
   570                           ;doprnt.c: 550: ((*sp++ = (c)));
   571  073E  082E               	movf	sprintf@c,w
   572  073F  00A3               	movwf	??_sprintf
   573  0740  082D               	movf	sprintf@sp,w
   574  0741  0084               	movwf	4
   575  0742  0823               	movf	??_sprintf,w
   576  0743  1383               	bcf	3,7	;select IRP bank0
   577  0744  0080               	movwf	0
   578  0745  3001               	movlw	1
   579  0746  00A3               	movwf	??_sprintf
   580  0747  0823               	movf	??_sprintf,w
   581  0748  07AD               	addwf	sprintf@sp,f
   582                           
   583                           ;doprnt.c: 551: continue;
   584  0749  2F2A               	goto	l773
   585  074A                     l729:	
   586                           
   587                           ;doprnt.c: 552: }
   588                           ;doprnt.c: 557: flag = 0;
   589  074A  01A7               	clrf	sprintf@flag
   590                           
   591                           ;doprnt.c: 831: }
   592                           
   593                           ;doprnt.c: 822: continue;
   594                           
   595                           ;doprnt.c: 811: default:
   596                           
   597                           ;doprnt.c: 707: case 'i':
   598                           ;doprnt.c: 708: break;
   599                           
   600                           ;doprnt.c: 706: case 'd':
   601                           
   602                           ;doprnt.c: 647: goto alldone;
   603                           
   604                           ;doprnt.c: 646: case 0:
   605                           
   606                           ;doprnt.c: 644: switch(c = *f++) {
   607  074B  3001               	movlw	1
   608  074C  07A0               	addwf	sprintf@f,f
   609  074D  30FF               	movlw	-1
   610  074E  0720               	addwf	sprintf@f,w
   611  074F  0084               	movwf	4
   612  0750  120A  118A  2003  120A  118A  	fcall	stringdir
   613  0755  00AE               	movwf	sprintf@c
   614                           
   615                           ; Switch size 1, requested type "space"
   616                           ; Number of cases is 3, Range of values is 0 to 105
   617                           ; switch strategies available:
   618                           ; Name         Instructions Cycles
   619                           ; simple_byte           10     6 (average)
   620                           ; jumptable            260     6 (fixed)
   621                           ;	Chosen strategy is simple_byte
   622  0756  3A00               	xorlw	0	; case 0
   623  0757  1903               	skipnz
   624  0758  2FF7               	goto	l775
   625  0759  3A64               	xorlw	100	; case 100
   626  075A  1903               	skipnz
   627  075B  2F60               	goto	l735
   628  075C  3A0D               	xorlw	13	; case 105
   629  075D  1903               	skipnz
   630  075E  2F60               	goto	l735
   631  075F  2F2A               	goto	l773
   632  0760                     l735:	
   633                           
   634                           ;doprnt.c: 1262: {
   635                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   636  0760  0826               	movf	sprintf@ap,w
   637  0761  0084               	movwf	4
   638  0762  1383               	bcf	3,7	;select IRP bank0
   639  0763  0800               	movf	0,w
   640  0764  00A9               	movwf	sprintf@_val
   641  0765  0A84               	incf	4,f
   642  0766  0800               	movf	0,w
   643  0767  00AA               	movwf	sprintf@_val+1
   644  0768  3002               	movlw	2
   645  0769  00A3               	movwf	??_sprintf
   646  076A  0823               	movf	??_sprintf,w
   647  076B  07A6               	addwf	sprintf@ap,f
   648                           
   649                           ;doprnt.c: 1270: if((int)_val._val < 0) {
   650  076C  1FAA               	btfss	sprintf@_val+1,7
   651  076D  2F77               	goto	l745
   652                           
   653                           ;doprnt.c: 1271: flag |= 0x03;
   654  076E  3003               	movlw	3
   655  076F  00A3               	movwf	??_sprintf
   656  0770  0823               	movf	??_sprintf,w
   657  0771  04A7               	iorwf	sprintf@flag,f
   658                           
   659                           ;doprnt.c: 1272: _val._val = -_val._val;
   660  0772  09A9               	comf	sprintf@_val,f
   661  0773  09AA               	comf	sprintf@_val+1,f
   662  0774  0AA9               	incf	sprintf@_val,f
   663  0775  1903               	skipnz
   664  0776  0AAA               	incf	sprintf@_val+1,f
   665  0777                     l745:	
   666                           
   667                           ;doprnt.c: 1273: }
   668                           ;doprnt.c: 1275: }
   669                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   670  0777  01AE               	clrf	sprintf@c
   671  0778  0AAE               	incf	sprintf@c,f
   672  0779  082E               	movf	sprintf@c,w
   673  077A  3A05               	xorlw	5
   674  077B  1903               	btfsc	3,2
   675  077C  2F9E               	goto	l757
   676  077D                     l749:	
   677                           
   678                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
   679  077D  082E               	movf	sprintf@c,w
   680  077E  00A3               	movwf	??_sprintf
   681  077F  0723               	addwf	??_sprintf,w
   682  0780  3E01               	addlw	low (_dpowers-__stringbase)
   683  0781  0084               	movwf	4
   684  0782  120A  118A  2003  120A  118A  	fcall	stringdir
   685  0787  00A4               	movwf	??_sprintf+1
   686  0788  120A  118A  2003  120A  118A  	fcall	stringdir
   687  078D  00A5               	movwf	??_sprintf+2
   688  078E  0825               	movf	??_sprintf+2,w
   689  078F  022A               	subwf	sprintf@_val+1,w
   690  0790  1D03               	skipz
   691  0791  2F94               	goto	u435
   692  0792  0824               	movf	??_sprintf+1,w
   693  0793  0229               	subwf	sprintf@_val,w
   694  0794                     u435:	
   695  0794  1C03               	btfss	3,0
   696  0795  2F9E               	goto	l757
   697                           
   698                           ;doprnt.c: 1316: break;
   699  0796  3001               	movlw	1
   700  0797  00A3               	movwf	??_sprintf
   701  0798  0823               	movf	??_sprintf,w
   702  0799  07AE               	addwf	sprintf@c,f
   703  079A  082E               	movf	sprintf@c,w
   704  079B  3A05               	xorlw	5
   705  079C  1D03               	skipz
   706  079D  2F7D               	goto	l749
   707  079E                     l757:	
   708                           
   709                           ;doprnt.c: 1431: {
   710                           ;doprnt.c: 1447: if(flag & 0x03)
   711  079E  0827               	movf	sprintf@flag,w
   712  079F  3903               	andlw	3
   713  07A0  1903               	btfsc	3,2
   714  07A1  2FAD               	goto	l763
   715                           
   716                           ;doprnt.c: 1448: ((*sp++ = ('-')));
   717  07A2  302D               	movlw	45
   718  07A3  00A3               	movwf	??_sprintf
   719  07A4  082D               	movf	sprintf@sp,w
   720  07A5  0084               	movwf	4
   721  07A6  0823               	movf	??_sprintf,w
   722  07A7  1383               	bcf	3,7	;select IRP bank0
   723  07A8  0080               	movwf	0
   724  07A9  3001               	movlw	1
   725  07AA  00A3               	movwf	??_sprintf
   726  07AB  0823               	movf	??_sprintf,w
   727  07AC  07AD               	addwf	sprintf@sp,f
   728  07AD                     l763:	
   729                           
   730                           ;doprnt.c: 1478: }
   731                           ;doprnt.c: 1481: prec = c;
   732  07AD  082E               	movf	sprintf@c,w
   733  07AE  00A3               	movwf	??_sprintf
   734  07AF  0823               	movf	??_sprintf,w
   735  07B0  00A8               	movwf	sprintf@prec
   736  07B1                     l771:	
   737                           ;doprnt.c: 1483: while(prec--) {
   738                           
   739  07B1  30FF               	movlw	-1
   740  07B2  00A3               	movwf	??_sprintf
   741  07B3  0823               	movf	??_sprintf,w
   742  07B4  07A8               	addwf	sprintf@prec,f
   743  07B5  0828               	movf	sprintf@prec,w
   744  07B6  3AFF               	xorlw	-1
   745  07B7  1903               	btfsc	3,2
   746  07B8  2F2A               	goto	l773
   747                           
   748                           ;doprnt.c: 1487: {
   749                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
   750  07B9  300A               	movlw	10
   751  07BA  00F8               	movwf	___lwmod@divisor
   752  07BB  3000               	movlw	0
   753  07BC  00F9               	movwf	___lwmod@divisor+1
   754  07BD  0828               	movf	sprintf@prec,w
   755  07BE  00A3               	movwf	??_sprintf
   756  07BF  0723               	addwf	??_sprintf,w
   757  07C0  3E01               	addlw	low (_dpowers-__stringbase)
   758  07C1  0084               	movwf	4
   759  07C2  120A  118A  2003  120A  118A  	fcall	stringdir
   760  07C7  00F0               	movwf	___lwdiv@divisor
   761  07C8  120A  118A  2003  120A  118A  	fcall	stringdir
   762  07CD  00F1               	movwf	___lwdiv@divisor+1
   763  07CE  082A               	movf	sprintf@_val+1,w
   764  07CF  01F3               	clrf	___lwdiv@dividend+1
   765  07D0  07F3               	addwf	___lwdiv@dividend+1,f
   766  07D1  0829               	movf	sprintf@_val,w
   767  07D2  01F2               	clrf	___lwdiv@dividend
   768  07D3  07F2               	addwf	___lwdiv@dividend,f
   769  07D4  120A  118A  269C  120A  118A  	fcall	___lwdiv
   770  07D9  0871               	movf	?___lwdiv+1,w
   771  07DA  01FB               	clrf	___lwmod@dividend+1
   772  07DB  07FB               	addwf	___lwmod@dividend+1,f
   773  07DC  0870               	movf	?___lwdiv,w
   774  07DD  01FA               	clrf	___lwmod@dividend
   775  07DE  07FA               	addwf	___lwmod@dividend,f
   776  07DF  120A  118A  2668  120A  118A  	fcall	___lwmod
   777  07E4  0878               	movf	?___lwmod,w
   778  07E5  3E30               	addlw	48
   779  07E6  1283               	bcf	3,5	;RP0=0, select bank0
   780  07E7  1303               	bcf	3,6	;RP1=0, select bank0
   781  07E8  00A4               	movwf	??_sprintf+1
   782  07E9  0824               	movf	??_sprintf+1,w
   783  07EA  00AE               	movwf	sprintf@c
   784                           
   785                           ;doprnt.c: 1532: }
   786                           ;doprnt.c: 1533: ((*sp++ = (c)));
   787  07EB  082E               	movf	sprintf@c,w
   788  07EC  00A3               	movwf	??_sprintf
   789  07ED  082D               	movf	sprintf@sp,w
   790  07EE  0084               	movwf	4
   791  07EF  0823               	movf	??_sprintf,w
   792  07F0  1383               	bcf	3,7	;select IRP bank0
   793  07F1  0080               	movwf	0
   794  07F2  3001               	movlw	1
   795  07F3  00A3               	movwf	??_sprintf
   796  07F4  0823               	movf	??_sprintf,w
   797  07F5  07AD               	addwf	sprintf@sp,f
   798  07F6  2FB1               	goto	l771
   799  07F7                     l775:	
   800                           ;doprnt.c: 1534: }
   801                           ;doprnt.c: 1542: }
   802                           ;doprnt.c: 1544: alldone:
   803                           
   804                           
   805                           ;doprnt.c: 1547: *sp = 0;
   806  07F7  082D               	movf	sprintf@sp,w
   807  07F8  0084               	movwf	4
   808  07F9  1383               	bcf	3,7	;select IRP bank0
   809  07FA  0180               	clrf	0
   810  07FB  0008               	return
   811  07FC                     __end_of_sprintf:	
   812                           ;doprnt.c: 1549: return 0;
   813                           ;	Return value of _sprintf is never used
   814                           
   815                           
   816                           	psect	text3
   817  0668                     __ptext3:	
   818 ;; *************** function ___lwmod *****************
   819 ;; Defined at:
   820 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/common/lwmod.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;  divisor         2    8[COMMON] unsigned int 
   823 ;;  dividend        2   10[COMMON] unsigned int 
   824 ;; Auto vars:     Size  Location     Type
   825 ;;  counter         1   13[COMMON] unsigned char 
   826 ;; Return value:  Size  Location     Type
   827 ;;                  2    8[COMMON] unsigned int 
   828 ;; Registers used:
   829 ;;		wreg, status,2, status,0
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   835 ;;      Params:         4       0       0       0       0
   836 ;;      Locals:         1       0       0       0       0
   837 ;;      Temps:          1       0       0       0       0
   838 ;;      Totals:         6       0       0       0       0
   839 ;;Total ram usage:        6 bytes
   840 ;; Hardware stack levels used:    1
   841 ;; This function calls:
   842 ;;		Nothing
   843 ;; This function is called by:
   844 ;;		_sprintf
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           
   849                           ;psect for function ___lwmod
   850  0668                     ___lwmod:	
   851                           
   852                           ;incstack = 0
   853                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   854  0668  0879               	movf	___lwmod@divisor+1,w
   855  0669  0478               	iorwf	___lwmod@divisor,w
   856  066A  1903               	skipnz
   857  066B  2E95               	goto	l709
   858  066C  01FD               	clrf	___lwmod@counter
   859  066D  0AFD               	incf	___lwmod@counter,f
   860  066E                     l699:	
   861  066E  1BF9               	btfsc	___lwmod@divisor+1,7
   862  066F  2E7C               	goto	l701
   863  0670  3001               	movlw	1
   864  0671                     u335:	
   865  0671  1003               	clrc
   866  0672  0DF8               	rlf	___lwmod@divisor,f
   867  0673  0DF9               	rlf	___lwmod@divisor+1,f
   868  0674  3EFF               	addlw	-1
   869  0675  1D03               	skipz
   870  0676  2E71               	goto	u335
   871  0677  3001               	movlw	1
   872  0678  00FC               	movwf	??___lwmod
   873  0679  087C               	movf	??___lwmod,w
   874  067A  07FD               	addwf	___lwmod@counter,f
   875  067B  2E6E               	goto	l699
   876  067C                     l701:	
   877  067C  0879               	movf	___lwmod@divisor+1,w
   878  067D  027B               	subwf	___lwmod@dividend+1,w
   879  067E  1D03               	skipz
   880  067F  2E82               	goto	u355
   881  0680  0878               	movf	___lwmod@divisor,w
   882  0681  027A               	subwf	___lwmod@dividend,w
   883  0682                     u355:	
   884  0682  1C03               	skipc
   885  0683  2E8A               	goto	l705
   886  0684  0878               	movf	___lwmod@divisor,w
   887  0685  02FA               	subwf	___lwmod@dividend,f
   888  0686  0879               	movf	___lwmod@divisor+1,w
   889  0687  1C03               	skipc
   890  0688  03FB               	decf	___lwmod@dividend+1,f
   891  0689  02FB               	subwf	___lwmod@dividend+1,f
   892  068A                     l705:	
   893  068A  3001               	movlw	1
   894  068B                     u365:	
   895  068B  1003               	clrc
   896  068C  0CF9               	rrf	___lwmod@divisor+1,f
   897  068D  0CF8               	rrf	___lwmod@divisor,f
   898  068E  3EFF               	addlw	-1
   899  068F  1D03               	skipz
   900  0690  2E8B               	goto	u365
   901  0691  3001               	movlw	1
   902  0692  02FD               	subwf	___lwmod@counter,f
   903  0693  1D03               	btfss	3,2
   904  0694  2E7C               	goto	l701
   905  0695                     l709:	
   906  0695  087B               	movf	___lwmod@dividend+1,w
   907  0696  01F9               	clrf	?___lwmod+1
   908  0697  07F9               	addwf	?___lwmod+1,f
   909  0698  087A               	movf	___lwmod@dividend,w
   910  0699  01F8               	clrf	?___lwmod
   911  069A  07F8               	addwf	?___lwmod,f
   912  069B  0008               	return
   913  069C                     __end_of___lwmod:	
   914                           
   915                           	psect	text4
   916  069C                     __ptext4:	
   917 ;; *************** function ___lwdiv *****************
   918 ;; Defined at:
   919 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/common/lwdiv.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;  divisor         2    0[COMMON] unsigned int 
   922 ;;  dividend        2    2[COMMON] unsigned int 
   923 ;; Auto vars:     Size  Location     Type
   924 ;;  quotient        2    5[COMMON] unsigned int 
   925 ;;  counter         1    7[COMMON] unsigned char 
   926 ;; Return value:  Size  Location     Type
   927 ;;                  2    0[COMMON] unsigned int 
   928 ;; Registers used:
   929 ;;		wreg, status,2, status,0
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   935 ;;      Params:         4       0       0       0       0
   936 ;;      Locals:         3       0       0       0       0
   937 ;;      Temps:          1       0       0       0       0
   938 ;;      Totals:         8       0       0       0       0
   939 ;;Total ram usage:        8 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; This function calls:
   942 ;;		Nothing
   943 ;; This function is called by:
   944 ;;		_sprintf
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           
   949                           ;psect for function ___lwdiv
   950  069C                     ___lwdiv:	
   951                           
   952                           ;incstack = 0
   953                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
   954  069C  01F5               	clrf	___lwdiv@quotient
   955  069D  01F6               	clrf	___lwdiv@quotient+1
   956  069E  0871               	movf	___lwdiv@divisor+1,w
   957  069F  0470               	iorwf	___lwdiv@divisor,w
   958  06A0  1903               	skipnz
   959  06A1  2ED3               	goto	l687
   960  06A2  01F7               	clrf	___lwdiv@counter
   961  06A3  0AF7               	incf	___lwdiv@counter,f
   962  06A4                     l675:	
   963  06A4  1BF1               	btfsc	___lwdiv@divisor+1,7
   964  06A5  2EB2               	goto	l677
   965  06A6  3001               	movlw	1
   966  06A7                     u265:	
   967  06A7  1003               	clrc
   968  06A8  0DF0               	rlf	___lwdiv@divisor,f
   969  06A9  0DF1               	rlf	___lwdiv@divisor+1,f
   970  06AA  3EFF               	addlw	-1
   971  06AB  1D03               	skipz
   972  06AC  2EA7               	goto	u265
   973  06AD  3001               	movlw	1
   974  06AE  00F4               	movwf	??___lwdiv
   975  06AF  0874               	movf	??___lwdiv,w
   976  06B0  07F7               	addwf	___lwdiv@counter,f
   977  06B1  2EA4               	goto	l675
   978  06B2                     l677:	
   979  06B2  3001               	movlw	1
   980  06B3                     u285:	
   981  06B3  1003               	clrc
   982  06B4  0DF5               	rlf	___lwdiv@quotient,f
   983  06B5  0DF6               	rlf	___lwdiv@quotient+1,f
   984  06B6  3EFF               	addlw	-1
   985  06B7  1D03               	skipz
   986  06B8  2EB3               	goto	u285
   987  06B9  0871               	movf	___lwdiv@divisor+1,w
   988  06BA  0273               	subwf	___lwdiv@dividend+1,w
   989  06BB  1D03               	skipz
   990  06BC  2EBF               	goto	u295
   991  06BD  0870               	movf	___lwdiv@divisor,w
   992  06BE  0272               	subwf	___lwdiv@dividend,w
   993  06BF                     u295:	
   994  06BF  1C03               	skipc
   995  06C0  2EC8               	goto	l683
   996  06C1  0870               	movf	___lwdiv@divisor,w
   997  06C2  02F2               	subwf	___lwdiv@dividend,f
   998  06C3  0871               	movf	___lwdiv@divisor+1,w
   999  06C4  1C03               	skipc
  1000  06C5  03F3               	decf	___lwdiv@dividend+1,f
  1001  06C6  02F3               	subwf	___lwdiv@dividend+1,f
  1002  06C7  1475               	bsf	___lwdiv@quotient,0
  1003  06C8                     l683:	
  1004  06C8  3001               	movlw	1
  1005  06C9                     u305:	
  1006  06C9  1003               	clrc
  1007  06CA  0CF1               	rrf	___lwdiv@divisor+1,f
  1008  06CB  0CF0               	rrf	___lwdiv@divisor,f
  1009  06CC  3EFF               	addlw	-1
  1010  06CD  1D03               	skipz
  1011  06CE  2EC9               	goto	u305
  1012  06CF  3001               	movlw	1
  1013  06D0  02F7               	subwf	___lwdiv@counter,f
  1014  06D1  1D03               	btfss	3,2
  1015  06D2  2EB2               	goto	l677
  1016  06D3                     l687:	
  1017  06D3  0876               	movf	___lwdiv@quotient+1,w
  1018  06D4  01F1               	clrf	?___lwdiv+1
  1019  06D5  07F1               	addwf	?___lwdiv+1,f
  1020  06D6  0875               	movf	___lwdiv@quotient,w
  1021  06D7  01F0               	clrf	?___lwdiv
  1022  06D8  07F0               	addwf	?___lwdiv,f
  1023  06D9  0008               	return
  1024  06DA                     __end_of___lwdiv:	
  1025  007E                     btemp	set	126	;btemp
  1026  007E                     wtemp	set	126
  1027  007E                     wtemp0	set	126
  1028  0080                     wtemp1	set	128
  1029  0082                     wtemp2	set	130
  1030  0084                     wtemp3	set	132
  1031  0086                     wtemp4	set	134
  1032  0088                     wtemp5	set	136
  1033  007F                     wtemp6	set	127
  1034  007E                     ttemp	set	126
  1035  007E                     ttemp0	set	126
  1036  0081                     ttemp1	set	129
  1037  0084                     ttemp2	set	132
  1038  0087                     ttemp3	set	135
  1039  007F                     ttemp4	set	127
  1040  007E                     ltemp	set	126
  1041  007E                     ltemp0	set	126
  1042  0082                     ltemp1	set	130
  1043  0086                     ltemp2	set	134
  1044  0080                     ltemp3	set	128


Data Sizes:
    Strings     10
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      40
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_1(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@a(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S69$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    tx@x	PTR unsigned char  size(1) Largest target is 20
		 -> main@a(BANK0[20]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0    1284
                                             15 BANK0     25    25      0
                            _sprintf
                                 _tx
 ---------------------------------------------------------------------------------
 (1) _tx                                                   4     4      0     117
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             15    12      3    1090
                                              0 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _tx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     28      28       5       50.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Jan  5 07:38:21 2021

                      pc 0002              __CFG_CP$OFF 0000                       l35 065D  
                     l43 06F2                       _GO 00FA                       _tx 0647  
                     fsr 0004                      l701 067C                      l705 068A  
                    ?_tx 0070                      l709 0695                      l735 0760  
                    l719 064A                      l745 0777                      l729 074A  
                    l683 06C8                      l675 06A4                      l771 07B1  
                    l763 07AD                      l677 06B2                      l757 079E  
                    l749 077D                      l773 072A                      l781 06EC  
                    l687 06D3                      l775 07F7                      l699 066E  
                    u305 06C9                      u335 0671                      u265 06A7  
           __CFG_CPD$OFF 0000                      u355 0682                      u435 0794  
                    u285 06B3                      u365 068B                      u295 06BF  
                    u497 071C                      fsr0 0004                      indf 0000  
                    tx@i 0071                      tx@x 0073             __CFG_FOSC$XT 0000  
                   ??_tx 0070             __CFG_LVP$OFF 0000                     _CHS0 00FB  
                   _CHS1 00FC                     _CHS2 00FD                     STR_1 0013  
                   _TRMT 04C1             __CFG_WRT$OFF 0000                     _main 06DA  
                   btemp 007E                     ltemp 007E                     start 0000  
                   ttemp 007E                     wtemp 007E                    ?_main 0070  
          __CFG_WDTE$OFF 0000          __end_of___lwdiv 06DA          __end_of___lwmod 069C  
                  _RCSTA 0018                    _SPBRG 0099                    _TXREG 0019  
                  _TXSTA 0098          __end_of_dpowers 0013                    main@a 0032  
                  main@x 0046           __CFG_BOREN$OFF 0000                    pclath 000A  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          __end_of_sprintf 07FC  
        __initialization 07FC             __end_of_main 0723                   ??_main 002F  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 _ADRESL 009E           __CFG_PWRTE$OFF 0000                ??___lwdiv 0074  
              ??___lwmod 007C                ??_sprintf 0023  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __end_of_tx 0668               __pmaintext 06DA  
             __stringtab 0003                  ___lwdiv 069C                  ___lwmod 0668  
                __ptext1 0647                  __ptext2 0723                  __ptext3 0668  
                __ptext4 069C                  _dpowers 0009                  _sprintf 0723  
   end_of_initialization 07FC      start_initialization 07FC                ___latbits 0002  
          __pcstackBANK0 0020      __end_of__stringdata 001D              sprintf@_val 0029  
            sprintf@flag 0027              sprintf@prec 0028         ___lwdiv@dividend 0072  
               ?___lwdiv 0070                 ?___lwmod 0078                __pstrings 0003  
       ___lwdiv@quotient 0075                 ?_sprintf 0020              __size_of_tx 0021  
            __stringbase 0008              __stringdata 0013         __size_of___lwdiv 003E  
       __size_of___lwmod 0034       __end_of__stringtab 0009          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0077         __size_of_sprintf 00D9            __size_of_main 0049  
              sprintf@ap 0026                sprintf@sp 002D         ___lwmod@dividend 007A  
              stringcode 0003                 sprintf@c 002E                 sprintf@f 0020  
        ___lwmod@divisor 0078          ___lwmod@counter 007D                 stringdir 0003  
               stringtab 0003  
